Index: GUI/src/main/java/tfj_gui/gui/NewBookingBirthdayController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tfj_gui.gui;\r\n\r\nimport Database.DBconnection.Connect;\r\nimport Database.TableView.*;\r\nimport Database.TableView.Menu;\r\nimport Login.Customer;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.*;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class NewBookingBirthdayController implements Initializable\r\n{\r\n    @FXML\r\n    public Label DisplayInformationLabel;\r\n    @FXML\r\n    private Button HomeButton;\r\n    @FXML\r\n    private Button NewBookingButton;\r\n    @FXML\r\n    private Button MyAccountButton;\r\n    @FXML\r\n    private Button MyBookingsButton;\r\n    @FXML\r\n    private Button ChangePasswordButton;\r\n    @FXML\r\n    private Button AboutUsButton;\r\n    @FXML\r\n    private Button HelpButton;\r\n    @FXML\r\n    private Button LogoutButton;\r\n    @FXML\r\n    private Button ExitButton;\r\n    @FXML\r\n    private Button Next1;\r\n    @FXML\r\n    private Button GoBack;\r\n    @FXML\r\n    private Label RemarkVenue;\r\n    @FXML\r\n    private TextField guests;\r\n    @FXML\r\n    private Button GetCost;\r\n    @FXML\r\n    private TextField BName;\r\n\r\n    @FXML\r\n    protected void GoToHome(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.GoToHome(event);}\r\n        else{\r\n            ControllerFunctions.GoToHome(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void NewBookingButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n\r\n    }\r\n    @FXML\r\n    protected void MyAccountButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.MyAccountButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.MyAccountButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void MyBookingsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.MyBookingsButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.MyBookingsButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void ChangePasswordButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.ChangePasswordButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.ChangePasswordButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void AboutUsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.AboutUsButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.AboutUsButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void HelpButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.HelpButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.HelpButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void LogoutButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.LogoutButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.LogoutButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void ExitButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.ExitButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.ExitButtonClicked(event);\r\n        }\r\n    }\r\n    private final String[] Drinks_Choices = {\"Lemon juice\",\"Orange juice\",\"Mixed fruit juice\",\"Beer\",\"---None---\"};\r\n    private final String[] Venue_Choices = new Venue().getAllVenueNames().toArray(new String[0]);\r\n    private final String[] Decoration_Choices = {\"Basic\",\"Premium\",\"Royal\"};\r\n    private final String[] Lunch_Choices ={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Snacks_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Breakfast_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Dinner_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] CakeFlavorChoices={\"Chocolate\",\"White Forest\",\"Mango\",\"Pineapple\",\"Rasmalai\",\"Red Velvet\",\"---None---\"};\r\n\r\n    @FXML\r\n    private ChoiceBox<String> Decoration_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Breakfast_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Drinks_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Venue_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Lunch_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Snacks_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Dinner_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Cake_choicebox;\r\n\r\n    //@Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        Breakfast_choicebox.getItems().addAll();\r\n        Breakfast_choicebox.setOnAction(this::Choice_in_Choice_box_breakfast);\r\n\r\n        Drinks_choicebox.getItems().addAll(Drinks_Choices);\r\n        Drinks_choicebox.setOnAction(this::Choice_in_Choice_box_drinks);\r\n\r\n        Venue_choicebox.getItems().addAll(Venue_Choices);\r\n        Venue_choicebox.setOnAction(this::Choice_in_Choice_box_venue);\r\n\r\n        Decoration_choicebox.getItems().addAll(Decoration_Choices);\r\n        Decoration_choicebox.setOnAction(this::Choice_in_Choice_box_decoration);\r\n\r\n        Breakfast_choicebox.getItems().addAll(Breakfast_Choices);\r\n        Breakfast_choicebox.setOnAction((this::Choice_in_Choice_box_breakfast));\r\n\r\n        Lunch_choicebox.getItems().addAll(Lunch_Choices);\r\n        Lunch_choicebox.setOnAction((this::Choice_in_Choice_box_lunch));\r\n\r\n        Snacks_choicebox.getItems().addAll(Snacks_Choices);\r\n        Snacks_choicebox.setOnAction((this::Choice_in_Choice_box_snacks));\r\n\r\n        Dinner_choicebox.getItems().addAll(Dinner_Choices);\r\n        Dinner_choicebox.setOnAction((this::Choice_in_Choice_box_dinner));\r\n\r\n        Cake_choicebox.getItems().addAll(CakeFlavorChoices);\r\n        Cake_choicebox.setOnAction((this::Choice_in_Choice_box_flavor));\r\n    }\r\n    private String myChoice_decoration,myChoice_breakfast,myChoice_Drinks,myChoice_venue,myChoice_Lunch,myChoice_Snacks,myChoice_Dinner,myChoice_cakeflavor;\r\n    private String getDescription() {\r\n        String desc = \"\";\r\n        Connection con = Connect.createConnection();\r\n        try {\r\n            Statement stmt = con.createStatement();\r\n            String query = \"Select * from venue where name='\" + (myChoice_venue) + \"'\";\r\n            ResultSet rs = stmt.executeQuery(query);\r\n            if (rs.next()) {\r\n                desc = \"Capacity=\" + (rs.getInt(3)) + \"\\nPrice per day :-\" + (rs.getInt(4)) + \"\\n\" + (rs.getString(5));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            Connect.closeConnection();\r\n        }\r\n        return desc;\r\n    }\r\n    protected void Choice_in_Choice_box_decoration(ActionEvent event)\r\n    {\r\n        myChoice_decoration=Decoration_choicebox.getValue();\r\n        System.out.println(myChoice_decoration);\r\n    }\r\n    protected void Choice_in_Choice_box_drinks(ActionEvent event)\r\n    {\r\n        myChoice_Drinks=Drinks_choicebox.getValue();\r\n        System.out.println(myChoice_Drinks);\r\n    }\r\n    protected void Choice_in_Choice_box_venue(ActionEvent event)\r\n    {\r\n        myChoice_venue=Venue_choicebox.getValue();\r\n        RemarkVenue.setText(getDescription());\r\n        System.out.println(myChoice_venue);\r\n    }\r\n    protected void Choice_in_Choice_box_breakfast(ActionEvent event)\r\n    {\r\n        myChoice_breakfast=Breakfast_choicebox.getValue();\r\n        System.out.println(myChoice_breakfast);\r\n    }\r\n    protected void Choice_in_Choice_box_lunch(ActionEvent event)\r\n    {\r\n        myChoice_Lunch=Lunch_choicebox.getValue();\r\n        System.out.println(myChoice_Lunch);\r\n    }\r\n    protected void Choice_in_Choice_box_snacks(ActionEvent event)\r\n    {\r\n        myChoice_Snacks=Snacks_choicebox.getValue();\r\n        System.out.println(myChoice_Snacks);\r\n    }\r\n    protected void Choice_in_Choice_box_dinner(ActionEvent event)\r\n    {\r\n        myChoice_Dinner=Dinner_choicebox.getValue();\r\n        System.out.println(myChoice_Dinner);\r\n    }\r\n\r\n    protected void Choice_in_Choice_box_flavor(ActionEvent event)\r\n    {\r\n        myChoice_cakeflavor=Cake_choicebox.getValue();\r\n        System.out.println(myChoice_cakeflavor);\r\n    }\r\n    @FXML\r\n    private DatePicker Start_Date = new DatePicker();\r\n    protected void getStartDate(ActionEvent event)\r\n    {\r\n        LocalDate SD = Start_Date.getValue();\r\n    }\r\n\r\n    @FXML\r\n    private DatePicker End_Date = new DatePicker();\r\n    protected void getEndDate(ActionEvent event)\r\n    {\r\n        LocalDate ED = End_Date.getValue();\r\n    }\r\n    private double Cost;\r\n    @FXML\r\n    protected void NextNewBooking(ActionEvent event) throws IOException, SQLException {\r\n        Venue v=new Venue(myChoice_venue,no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity=v.getCapacity();\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        if(totalCapacity<no_of_guests){\r\n            DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n        }\r\n        else{\r\n            SetBooking();\r\n            if(w1.getBookingStatus().compareToIgnoreCase(\"Booked\")==0) {\r\n                Add_to_DB();\r\n                Send_Data_Between inst = Send_Data_Between.getInstance();\r\n                if (inst.getCheck() == 1) {\r\n                    ManagerControllerFunctions.GoToHome(event);\r\n                } else {\r\n                    ControllerFunctions.GoToHome(event);\r\n                }\r\n            }\r\n            else DisplayInformationLabel.setText(\"Venue not available\");}\r\n    }\r\n    @FXML\r\n    protected void DisplayFinalCost(ActionEvent event)\r\n    {   Venue v=new Venue(myChoice_venue,no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity=v.getCapacity();\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        if(totalCapacity<no_of_guests)\r\n        {\r\n            DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n        }\r\n        else SetBooking();\r\n        //DisplayInformationLabel.setText(\"Breakfast\");\r\n    }\r\n    @FXML\r\n    protected void ReturnToHome(ActionEvent event) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"NewBooking_View.fxml\"));\r\n        Stage stage= (Stage) ((Node)event.getSource()).getScene().getWindow();\r\n        Scene scene = new Scene(fxmlLoader.load(),1080,720);\r\n        stage.setTitle(\"THE FUNCTION JUNCTION\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    @FXML\r\n    private String Name;\r\n    private String Email;\r\n    private String PhNumber;\r\n    private String Cake_flavor = myChoice_cakeflavor;\r\n    private int totalCapacity;\r\n    private int no_of_guests;\r\n    public void getPass(String loginID){\r\n        String password=\"\";\r\n        try{\r\n            Connection conn= Connect.createConnection();\r\n            String query=\"Select * from customer where loginid=?\";\r\n            PreparedStatement preStatement=conn.prepareStatement(query);\r\n            preStatement.setString(1,loginID);\r\n            ResultSet rs=preStatement.executeQuery();\r\n            if(rs.next()){\r\n                Name = rs.getString(\"Name\");\r\n                Email = rs.getString(\"Email\");\r\n                PhNumber = rs.getString(\"PhoneNumber\");\r\n            }\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally{\r\n            Connect.closeConnection();\r\n        }\r\n    }\r\n    protected String GetBookingID()\r\n    {\r\n        String bookingid=\"\";\r\n        Connection c = Connect.createConnection();\r\n        try{\r\n            String query=\"Select max(BookingID) from bookinghistory\";\r\n            Statement s1 = c.createStatement();\r\n            ResultSet rs = s1.executeQuery(query);\r\n            if(rs.next())\r\n            {\r\n                bookingid = rs.getString(1);\r\n                int bs = Integer.parseInt(bookingid)+1;\r\n                bookingid = String.valueOf(bs);\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return bookingid;\r\n    }\r\n    ArrayList<Menu> menu;\r\n    double Venue_cost;\r\n    double Breakfast_cost;\r\n    double Lunch_cost;\r\n    double Snacks_cost;\r\n    double Drinks_cost;\r\n    double Dinner_cost;\r\n    double Cake_Cost;\r\n    String BPName;\r\n    Birthday w1 = new Birthday();\r\n    protected void SetBooking()\r\n    {\r\n\r\n        LocalDate startdate = Start_Date.getValue();\r\n        LocalDate enddate = End_Date.getValue();\r\n        Date sd = Date.valueOf(startdate);\r\n        Date ed = Date.valueOf(enddate);\r\n        String venue = Venue_choicebox.getValue();\r\n        Venue v1 = new Venue(venue,Integer.parseInt(guests.getText()));\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        v1.setCapacity();\r\n        totalCapacity=v1.getCapacity();\r\n        String booking_status = v1.getBookingStatus(sd,ed);\r\n\r\n        BreakFast b1 = new BreakFast();\r\n        b1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            b1.setBf_class(myChoice_breakfast);\r\n            Breakfast_cost = b1.calculateCost();}\r\n        else{\r\n            Breakfast_cost=0;\r\n        }\r\n        Lunch l1 = new Lunch();\r\n        l1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            l1.setLunch_class(myChoice_Lunch);\r\n            Lunch_cost = l1.calculateCost();}\r\n        else{\r\n            Lunch_cost=0;\r\n        }\r\n\r\n        Snacks s1 = new Snacks();\r\n        s1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            s1.setSnack_class(myChoice_Snacks);\r\n            Snacks_cost = s1.calculateCost();}\r\n        else{\r\n            Snacks_cost=0;\r\n        }\r\n\r\n        Dinner d1 = new Dinner();\r\n        d1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            d1.setDinner_class(myChoice_Dinner);\r\n            Dinner_cost = d1.calculateCost();}\r\n        else{\r\n            Dinner_cost=0;\r\n        }\r\n\r\n        Drinks dr1 = new Drinks();\r\n        int drinks_index=0;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[0]))     drinks_index=1;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[1]))     drinks_index=2;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[2]))     drinks_index=3;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[3]))     drinks_index=4;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[4]))     drinks_index=0;\r\n        dr1.setMyChoice(drinks_index);\r\n        dr1.setNumberOfGuests(no_of_guests);\r\n        Drinks_cost = dr1.calculateCost();\r\n\r\n        Birthday br = new Birthday();\r\n        int cake_index=0;\r\n        if(Objects.equals(myChoice_cakeflavor, CakeFlavorChoices[0]))     cake_index=0;\r\n        if(Objects.equals(myChoice_cakeflavor, CakeFlavorChoices[1]))     cake_index=1;\r\n        if(Objects.equals(myChoice_cakeflavor, CakeFlavorChoices[2]))     cake_index=2;\r\n        if(Objects.equals(myChoice_cakeflavor, CakeFlavorChoices[3]))     cake_index=3;\r\n        if(Objects.equals(myChoice_cakeflavor, CakeFlavorChoices[4]))     cake_index=4;\r\n        if(Objects.equals(myChoice_cakeflavor, CakeFlavorChoices[5]))     cake_index=5;\r\n        if(Objects.equals(myChoice_cakeflavor, CakeFlavorChoices[6]))     cake_index=6;\r\n        br.setMyChoice(cake_index);\r\n        br.setNumberOfGuests(no_of_guests);\r\n        Cake_Cost = br.CalculateCost();\r\n        BPName = BName.getText();\r\n        double Menu_Cost = Breakfast_cost + Lunch_cost + Snacks_cost + Drinks_cost + Dinner_cost + Cake_Cost;\r\n        System.out.print(Menu_Cost);\r\n        double Final_Cost;\r\n        if(booking_status.compareToIgnoreCase(\"Available\") == 0)\r\n        {\r\n            int next_booking_id = Integer.parseInt(GetBookingID());\r\n            w1.setBookingStatus(\"Booked\");\r\n            w1.setMyChoice(cake_index);\r\n            w1.setStartDate(sd);\r\n            w1.setEndDate(ed);\r\n            w1.setVenue(v1);\r\n            Venue_cost = w1.CalculateCost();\r\n            System.out.print(Venue_cost);\r\n            Final_Cost = Venue_cost + Menu_Cost;\r\n            DisplayInformationLabel.setText(\"\\nCake Cost : \" + Cake_Cost + \"\\nBreakfast Cost : \"+(Breakfast_cost)+\"\\nLunch Cost : \"+(Lunch_cost)\r\n                    +\"\\nDrinks Cost : \"+(Drinks_cost)\r\n                    +\"\\nSnacks Cost : \"+(Snacks_cost)\r\n                    +\"\\nDinner Cost : \"+(Dinner_cost)\r\n                    +\"\\nVenue Cost : \" +(Venue_cost)\r\n                    +\"\\nFinal_Cost = \"+(Final_Cost)\r\n                    +\"\\n Name of Birthday person : \"+(BPName));\r\n        }\r\n//        else\r\n//        {\r\n//            DisplayInformationLabel.setText(\"Hall not available.\");\r\n//        }\r\n    }\r\n\r\n    protected void Add_to_DB() throws SQLException {\r\n        Send_Data_Between instance = Send_Data_Between.getInstance();\r\n        Customer c1 = instance.getCustomer();\r\n        String LoginID = c1.getLoginId();\r\n        Connection dbcon = Connect.createConnection();\r\n        String Query1 = \"select * from customer where LoginID = ?\";\r\n        PreparedStatement ps = dbcon.prepareStatement(Query1);\r\n        ps.setString(1,LoginID);\r\n        ResultSet rs = ps.executeQuery();\r\n        String name=\"\",email=\"\",ph_number=\"\";\r\n        if(rs.next())\r\n        {\r\n            name = rs.getString(3);\r\n            email = rs.getString(6);\r\n            ph_number = rs.getString(5);\r\n        }\r\n\r\n        String query2 = \"insert into bookinghistory values(?,?,?,?,?,?,?,?)\";\r\n        PreparedStatement ps1 = dbcon.prepareStatement(query2);\r\n        ps1.setString(1,GetBookingID());\r\n        ps1.setString(2,name);\r\n        ps1.setString(3,email);\r\n        ps1.setString(4,ph_number);\r\n        ps1.setString(5,myChoice_venue);\r\n        ps1.setString(6,w1.getStartDate().toString());\r\n        ps1.setString(7,w1.getEndDate().toString());\r\n        ps1.setString(8,\"Booked\");\r\n        ps1.executeUpdate();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/tfj_gui/gui/NewBookingBirthdayController.java b/GUI/src/main/java/tfj_gui/gui/NewBookingBirthdayController.java
--- a/GUI/src/main/java/tfj_gui/gui/NewBookingBirthdayController.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/tfj_gui/gui/NewBookingBirthdayController.java	(date 1669212340133)
@@ -283,6 +283,7 @@
             SetBooking();
             if(w1.getBookingStatus().compareToIgnoreCase("Booked")==0) {
                 Add_to_DB();
+                UpdateEvent();
                 Send_Data_Between inst = Send_Data_Between.getInstance();
                 if (inst.getCheck() == 1) {
                     ManagerControllerFunctions.GoToHome(event);
@@ -502,5 +503,12 @@
         ps1.setString(7,w1.getEndDate().toString());
         ps1.setString(8,"Booked");
         ps1.executeUpdate();
+    }
+    public void UpdateEvent() throws SQLException {
+        Send_Data_Between need=Send_Data_Between.getInstance();
+        Customer k=need.getCustomer();
+        Customer c=Customer.getDetailsCustomer(k.getLoginId());
+        Event.updateEvent(w1,c,Integer.parseInt(GetBookingID()),"Birthday");
+
     }
 }
Index: GUI/src/main/java/Database/TableView/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Database.TableView;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\nabstract class Event\r\n{\r\n    private Date StartDate;\r\n    private Date EndDate;\r\n    private Venue venue;\r\n    private String BookingStatus;\r\n    private ArrayList<Menu> menus=new ArrayList<>();\r\n\r\n    public Date getStartDate() {\r\n        return StartDate;\r\n    }\r\n\r\n    public void setStartDate(Date startDate) {\r\n        StartDate = startDate;\r\n    }\r\n\r\n    public Date getEndDate() {\r\n        return EndDate;\r\n    }\r\n\r\n    public void setEndDate(Date endDate) {\r\n        EndDate = endDate;\r\n    }\r\n\r\n    public Venue getVenue() {\r\n        return venue;\r\n    }\r\n\r\n    public void setVenue(Venue venue) {\r\n        this.venue = venue;\r\n    }\r\n\r\n    public String getBookingStatus() {\r\n        return BookingStatus;\r\n    }\r\n\r\n    public void setBookingStatus(String bookingStatus) {\r\n        BookingStatus = bookingStatus;\r\n    }\r\n\r\n    public ArrayList<Menu> getMenus() {\r\n        return menus;\r\n    }\r\n\r\n    public void setMenus(ArrayList<Menu> menus) {\r\n        this.menus = menus;\r\n    }\r\n\r\n    public Event() {\r\n    }\r\n\r\n    public Event(Date startDate, Date endDate, Venue venue, String bookingStatus, ArrayList<Menu> menus) {\r\n        StartDate = startDate;\r\n        EndDate = endDate;\r\n        this.venue = venue;\r\n        BookingStatus = bookingStatus;\r\n        this.menus = menus;\r\n    }\r\n\r\n    abstract double CalculateCost();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/Database/TableView/Event.java b/GUI/src/main/java/Database/TableView/Event.java
--- a/GUI/src/main/java/Database/TableView/Event.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/Database/TableView/Event.java	(date 1669211660447)
@@ -1,14 +1,44 @@
 package Database.TableView;
+import Database.DBconnection.Connect;
+import Login.Customer;
+
 import java.sql.*;
 import java.util.ArrayList;
 
-abstract class Event
+public abstract class Event
 {
     private Date StartDate;
     private Date EndDate;
     private Venue venue;
-    private String BookingStatus;
+    private String BookingStatus="";
     private ArrayList<Menu> menus=new ArrayList<>();
+    private double finalCost;
+    private String firstName;
+    private String lastName;
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName = firstName;
+    }
+
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName = lastName;
+    }
+
+    public double getFinalCost() {
+        return finalCost;
+    }
+
+    public void setFinalCost(double finalCost) {
+        this.finalCost = finalCost;
+    }
 
     public Date getStartDate() {
         return StartDate;
@@ -62,4 +92,24 @@
     }
 
     abstract double CalculateCost();
+    public static void updateEvent(Event even, Customer c, int BookingID, String name) throws SQLException {
+        try (Connection con = Connect.createConnection()) {
+            String query = "insert into event values(?,?,?,?,?,?,?,?,?,?,?,?)";
+            PreparedStatement ps=con.prepareStatement(query);
+            ps.setInt(1,BookingID);
+            ps.setString(2,c.getCustomerID());
+            ps.setString(3,name);
+            ps.setString(4,c.getFirstName());
+            ps.setString(5,c.getLastName());
+            ps.setString(6,c.getEmailId());
+            ps.setString(7,c.getPhoneNumber());
+            ps.setString(8,even.getVenue().getVenueName());
+            ps.setString(9,even.getStartDate().toString());
+            ps.setString(10,even.getEndDate().toString());
+            ps.setDouble(11,even.getFinalCost());
+            ps.setString(12,even.getBookingStatus());
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
 }
Index: GUI/src/main/java/Login/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Login;\r\n\r\nimport CSVLoaders.CustomerUpdate;\r\nimport CSVLoaders.changeBookingHistoryCSV;\r\nimport CSVLoaders.changeCustomerCSV;\r\nimport Database.DBconnection.Connect;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.*;\r\nimport java.time.LocalDate;\r\nimport java.util.Calendar;\r\nimport java.util.concurrent.Callable;\r\n\r\npublic class Customer extends Person implements Login\r\n{\r\n    private String CustomerID;\r\n    private String MembershipStatus; //New,Premium,Gold\r\n    private LocalDate DateOfJoining ;\r\n\r\n    public Customer()\r\n    {\r\n\r\n    }\r\n\r\n    public Customer(String firstName, String lastName, String phoneNumber, String emailId, String loginId, String password,String DOB, String membershipStatus) {\r\n        super(firstName, lastName, phoneNumber, emailId, loginId, password, DOB);\r\n        this.MembershipStatus = membershipStatus;\r\n        this.DateOfJoining = LocalDate.now();\r\n    }\r\n\r\n    public Customer(String firstName, String lastName, String phoneNumber, String emailId, String loginId, String password,String DOB) {\r\n        super(firstName, lastName, phoneNumber, emailId, loginId, password, DOB);\r\n        this.MembershipStatus = \"New\";\r\n        this.DateOfJoining = LocalDate.now();\r\n    }\r\n\r\n    public String getCustomerID(){return this.CustomerID;}\r\n    public void setCustomerID(String customerID){this.CustomerID = customerID;}\r\n    public String getMembershipStatus(){return this.MembershipStatus;}\r\n    public void setMembershipStatus(String membershipStatus){this.MembershipStatus = membershipStatus;}\r\n    public LocalDate getDateOfJoining(){return this.DateOfJoining;}\r\n    public void setDateOfJoining(LocalDate dateOfJoining){this.DateOfJoining = dateOfJoining;}\r\n    @Override\r\n    public String getPass(String loginID){\r\n        String password=\"\";\r\n        try{\r\n            Connection conn= Connect.createConnection();\r\n            String query=\"Select password from customer where loginid=?\";\r\n            PreparedStatement preStatement=conn.prepareStatement(query);\r\n            preStatement.setString(1,loginID);\r\n            ResultSet rs=preStatement.executeQuery();\r\n            if(rs.next()){\r\n                password=rs.getString(\"password\");\r\n            }\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally{\r\n            Connect.closeConnection();\r\n        }\r\n        return password;\r\n    }\r\n    @Override\r\n    public void changePass(String LoginID,String newPassword){\r\n        Connection conn=Connect.createConnection();\r\n        try{String query=\"update customer set password=? where loginid=?\";\r\n            PreparedStatement preparedStatement=conn.prepareStatement(query);\r\n            preparedStatement.setString(1,newPassword);\r\n            preparedStatement.setString(2,LoginID);\r\n            preparedStatement.executeUpdate();\r\n            CustomerUpdate.UpdateCustomerCSV(LoginID,newPassword);\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            throw new RuntimeException(e);\r\n        }\r\n        finally\r\n        {\r\n            Connect.closeConnection();\r\n        }\r\n    }\r\n    public boolean Availability(String LogID)\r\n    {\r\n        Connection con1 = Connect.createConnection();\r\n        try {\r\n            String query1 = \"SELECT loginid FROM customer WHERE loginid=?\";\r\n            PreparedStatement preStatement=con1.prepareStatement(query1);\r\n            preStatement.setString(1,LogID);\r\n            ResultSet rs1 = preStatement.executeQuery();\r\n            if (rs1.isBeforeFirst())\r\n            {\r\n                System.out.println(\"LoginId Already Exists.\");\r\n                return false;\r\n            }\r\n            else\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        catch (SQLException e)\r\n        {\r\n            throw new RuntimeException(e);\r\n        }\r\n        finally {\r\n            Connect.closeConnection();\r\n        }\r\n    }\r\n    public void Signup(String Fname, String Lname,String PhNo,String Email,String LoginId,String Password,String dob,String cid)\r\n    {\r\n        this.setFirstName(Fname);\r\n        this.setLastName(Lname);\r\n        this.setPhoneNumber(PhNo);\r\n        this.setEmailId(Email);\r\n        this.setLoginId(LoginId);\r\n        this.setPassword(Password);\r\n        this.setDOB(dob);\r\n        this.setMembershipStatus(\"New\");\r\n        this.DateOfJoining = LocalDate.now();\r\n        this.setCustomerID(cid);\r\n        if (Availability(LoginId))\r\n        {  Connection c2 = Connect.createConnection();\r\n            try {\r\n                String query2 = \"INSERT INTO customer (LoginId,FirstName,LastName,PhoneNumber,EmailId,Password,DOB,CustomerID,MembershipStatus,DateOfJoining) VALUES (?,?,?,?,?,?,?,?,?,?)\";\r\n                PreparedStatement preStatement2 = c2.prepareStatement(query2);\r\n                preStatement2.setString(1,this.getLoginId());\r\n                preStatement2.setString(2,this.getFirstName());\r\n                preStatement2.setString(3,this.getLastName());\r\n                preStatement2.setString(4,this.getPhoneNumber());\r\n                preStatement2.setString(5,this.getEmailId());\r\n                preStatement2.setString(6,this.getPassword());\r\n                preStatement2.setString(7,this.getDOB().toString());\r\n                preStatement2.setString(8,this.getCustomerID());\r\n                preStatement2.setString(9,this.getMembershipStatus());\r\n                preStatement2.setString(10,this.getDateOfJoining().toString());\r\n                preStatement2.executeUpdate();\r\n                changeCustomerCSV.load_into_customer_csv(this.getFirstName(),this.getLastName(),this.getPhoneNumber(),this.getEmailId(),this.getLoginId(),this.getPassword(),this.getDOB(),this.getCustomerID(),this.getMembershipStatus());\r\n            }\r\n            catch (SQLException e)\r\n            {\r\n                e.printStackTrace();\r\n            }\r\n            catch (IOException e)\r\n            {\r\n                throw new RuntimeException(e);\r\n            }\r\n            finally\r\n            {\r\n                Connect.closeConnection();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            System.out.println(\"unsuccessfull\");\r\n        }\r\n    }\r\n    public static void DeleteMe(String LoginID)\r\n    {\r\n        Connection conn=Connect.createConnection();\r\n        try{\r\n            String query=\"delete from customer where loginid=?\";\r\n            PreparedStatement preparedStatement=conn.prepareStatement(query);\r\n            preparedStatement.setString(1,LoginID);\r\n            preparedStatement.executeUpdate();\r\n            changeCustomerCSV.load_outof_customer_csv(LoginID);\r\n        }\r\n        catch(SQLException | IOException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally\r\n        {\r\n            Connect.closeConnection();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/Login/Customer.java b/GUI/src/main/java/Login/Customer.java
--- a/GUI/src/main/java/Login/Customer.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/Login/Customer.java	(date 1669210320050)
@@ -61,6 +61,30 @@
         }
         return password;
     }
+    public static Customer getDetailsCustomer(String loginID){
+        Customer c=new Customer();
+        try{
+            Connection conn= Connect.createConnection();
+            String query="Select * from customer where loginid=?";
+            PreparedStatement preStatement=conn.prepareStatement(query);
+            preStatement.setString(1,loginID);
+            ResultSet rs=preStatement.executeQuery();
+            if(rs.next()){
+                c.setFirstName(rs.getString(3));
+                c.setLastName(rs.getString(4));
+                c.setPhoneNumber(rs.getString(5));
+                c.setEmailId(rs.getString(6));
+                c.setCustomerID(rs.getString(8));
+            }
+        }
+        catch(SQLException e){
+            e.printStackTrace();
+        }
+        finally{
+            Connect.closeConnection();
+        }
+        return c;
+    }
     @Override
     public void changePass(String LoginID,String newPassword){
         Connection conn=Connect.createConnection();
Index: GUI/src/main/java/tfj_gui/gui/NewBookingCustomViewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tfj_gui.gui;\r\n\r\nimport Database.DBconnection.Connect;\r\nimport Database.TableView.Custom;\r\nimport Database.TableView.Venue;\r\nimport Database.TableView.Wedding;\r\nimport Login.Customer;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.*;\r\nimport java.time.LocalDate;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class NewBookingCustomViewController implements Initializable {\r\n    @FXML\r\n    public Label DisplayInformationLabel;\r\n    @FXML\r\n    public TextField guests;\r\n    @FXML\r\n    public Button GetCost;\r\n    @FXML\r\n    public Label RemarVenue1;\r\n    @FXML\r\n    public Label RemarVenue;\r\n    @FXML\r\n    public TextField guests1;\r\n    @FXML\r\n    private Button HomeButton;\r\n    @FXML\r\n    private Button NewBookingButton;\r\n    @FXML\r\n    private Button MyAccountButton;\r\n    @FXML\r\n    private Button MyBookingsButton;\r\n    @FXML\r\n    private Button ChangePasswordButton;\r\n    @FXML\r\n    private Button AboutUsButton;\r\n    @FXML\r\n    private Button HelpButton;\r\n    @FXML\r\n    private Button LogoutButton;\r\n    @FXML\r\n    private Button ExitButton;\r\n    @FXML\r\n    private Button Next1;\r\n    @FXML\r\n    private Button GoBack;\r\n\r\n    @FXML\r\n    protected void GoToHome(ActionEvent event) throws IOException {\r\n        Send_Data_Between inst = Send_Data_Between.getInstance();\r\n        if (inst.getCheck() == 1) {\r\n            ManagerControllerFunctions.GoToHome(event);\r\n        } else {\r\n            ControllerFunctions.GoToHome(event);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void NewBookingButtonClicked(ActionEvent event) throws IOException {\r\n\r\n    }\r\n\r\n    @FXML\r\n    protected void MyAccountButtonClicked(ActionEvent event) throws IOException {\r\n        Send_Data_Between inst = Send_Data_Between.getInstance();\r\n        if (inst.getCheck() == 1) {\r\n            ManagerControllerFunctions.MyAccountButtonClicked(event);\r\n        } else {\r\n            ControllerFunctions.MyAccountButtonClicked(event);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void MyBookingsButtonClicked(ActionEvent event) throws IOException {\r\n        Send_Data_Between inst = Send_Data_Between.getInstance();\r\n        if (inst.getCheck() == 1) {\r\n            ManagerControllerFunctions.MyBookingsButtonClicked(event);\r\n        } else {\r\n            ControllerFunctions.MyBookingsButtonClicked(event);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void ChangePasswordButtonClicked(ActionEvent event) throws IOException {\r\n        Send_Data_Between inst = Send_Data_Between.getInstance();\r\n        if (inst.getCheck() == 1) {\r\n            ManagerControllerFunctions.ChangePasswordButtonClicked(event);\r\n        } else {\r\n            ControllerFunctions.ChangePasswordButtonClicked(event);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void AboutUsButtonClicked(ActionEvent event) throws IOException {\r\n        Send_Data_Between inst = Send_Data_Between.getInstance();\r\n        if (inst.getCheck() == 1) {\r\n            ManagerControllerFunctions.AboutUsButtonClicked(event);\r\n        } else {\r\n            ControllerFunctions.AboutUsButtonClicked(event);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void HelpButtonClicked(ActionEvent event) throws IOException {\r\n        Send_Data_Between inst = Send_Data_Between.getInstance();\r\n        if (inst.getCheck() == 1) {\r\n            ManagerControllerFunctions.HelpButtonClicked(event);\r\n        } else {\r\n            ControllerFunctions.HelpButtonClicked(event);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void LogoutButtonClicked(ActionEvent event) throws IOException {\r\n        Send_Data_Between inst = Send_Data_Between.getInstance();\r\n        if (inst.getCheck() == 1) {\r\n            ManagerControllerFunctions.LogoutButtonClicked(event);\r\n        } else {\r\n            ControllerFunctions.LogoutButtonClicked(event);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void ExitButtonClicked(ActionEvent event) throws IOException {\r\n        Send_Data_Between inst = Send_Data_Between.getInstance();\r\n        if (inst.getCheck() == 1) {\r\n            ManagerControllerFunctions.ExitButtonClicked(event);\r\n        } else {\r\n            ControllerFunctions.ExitButtonClicked(event);\r\n        }\r\n    }\r\n\r\n    private final String[] Venue_Choices = new Venue().getAllVenueNames().toArray(new String[0]);\r\n    @FXML\r\n    private ChoiceBox<String> Venue_choicebox;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        Venue_choicebox.getItems().addAll(Venue_Choices);\r\n        Venue_choicebox.setOnAction(this::Choice_in_Choice_box);\r\n    }\r\n\r\n    private String myChoice_venue;\r\n\r\n    protected void Choice_in_Choice_box(ActionEvent event) {\r\n        myChoice_venue = Venue_choicebox.getValue();\r\n        getDescription();\r\n    }\r\n\r\n    @FXML\r\n    private DatePicker Start_Date = new DatePicker();\r\n\r\n    protected void getStartDate(ActionEvent event) {\r\n        LocalDate SD = Start_Date.getValue();\r\n    }\r\n\r\n    @FXML\r\n    private DatePicker End_Date = new DatePicker();\r\n\r\n    protected void getEndDate(ActionEvent event) {\r\n        LocalDate ED = End_Date.getValue();\r\n    }\r\n\r\n    @FXML\r\n    protected void NextNewBooking(ActionEvent event) throws IOException, SQLException {\r\n        Venue v = new Venue(myChoice_venue, no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity = v.getCapacity();\r\n        no_of_guests = Integer.parseInt(guests.getText());\r\n        if (totalCapacity < no_of_guests) {\r\n            DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n        } else {\r\n            SetBooking();\r\n            if (w1.getBookingStatus().compareToIgnoreCase(\"Booked\") == 0) {\r\n                Add_to_DB();\r\n                Send_Data_Between inst = Send_Data_Between.getInstance();\r\n                if (inst.getCheck() == 1) {\r\n                    ManagerControllerFunctions.GoToHome(event);\r\n                } else {\r\n                    ControllerFunctions.GoToHome(event);\r\n                }\r\n\r\n            }\r\n            else DisplayInformationLabel.setText(\"Venue not available\");\r\n\r\n        }\r\n    }\r\n\r\n    public void DisplayFinalCost(ActionEvent actionEvent) {\r\n        Venue v = new Venue(myChoice_venue, no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity = v.getCapacity();\r\n        no_of_guests = Integer.parseInt(guests.getText());\r\n        if (totalCapacity < no_of_guests) {\r\n            DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n        } else SetBooking();\r\n    }\r\n\r\n    @FXML\r\n    protected void ReturnToHome(ActionEvent event) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"NewBooking_View.fxml\"));\r\n        Stage stage= (Stage) ((Node)event.getSource()).getScene().getWindow();\r\n        Scene scene = new Scene(fxmlLoader.load(),1080,720);\r\n        stage.setTitle(\"THE FUNCTION JUNCTION\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private String getDescription() {\r\n        String desc = \"\";\r\n        Connection con = Connect.createConnection();\r\n        try {\r\n            Statement stmt = con.createStatement();\r\n            String query = \"Select * from venue where name='\" + (myChoice_venue) + \"'\";\r\n            ResultSet rs = stmt.executeQuery(query);\r\n            if (rs.next()) {\r\n                desc = \"Capacity=\" + (rs.getInt(3)) + \"\\nPrice per day :-\" + (rs.getInt(4)) + \"\\n\" + (rs.getString(5));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            Connect.closeConnection();\r\n        }\r\n        return desc;\r\n    }\r\n\r\n    private int totalCapacity;\r\n    private int no_of_guests;\r\n\r\n//    public void getPass(String loginID) {\r\n//        String password = \"\";\r\n//        try {\r\n//            Connection conn = Connect.createConnection();\r\n//            String query = \"Select * from customer where loginid=?\";\r\n//            PreparedStatement preStatement = conn.prepareStatement(query);\r\n//            preStatement.setString(1, loginID);\r\n//            ResultSet rs = preStatement.executeQuery();\r\n//            if (rs.next()) {\r\n//                Name = rs.getString(\"Name\");\r\n//                Email = rs.getString(\"Email\");\r\n//                PhNumber = rs.getString(\"PhoneNumber\");\r\n//            }\r\n//        } catch (SQLException e) {\r\n//            e.printStackTrace();\r\n//        } finally {\r\n//            Connect.closeConnection();\r\n//        }\r\n//    }\r\n\r\n    protected String GetBookingID() {\r\n        String bookingid = \"\";\r\n        Connection c = Connect.createConnection();\r\n        try {\r\n            String query = \"Select max(BookingID) from bookinghistory\";\r\n            Statement s1 = c.createStatement();\r\n            ResultSet rs = s1.executeQuery(query);\r\n            if (rs.next()) {\r\n                bookingid = rs.getString(1);\r\n                int bs = Integer.parseInt(bookingid) + 1;\r\n                bookingid = String.valueOf(bs);\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return bookingid;\r\n    }\r\n\r\n    double Venue_cost;\r\n    Custom w1 = new Custom();\r\n\r\n    protected void SetBooking() {\r\n\r\n        LocalDate startdate = Start_Date.getValue();\r\n        LocalDate enddate = End_Date.getValue();\r\n        Date sd = Date.valueOf(startdate);\r\n        Date ed = Date.valueOf(enddate);\r\n        String venue = Venue_choicebox.getValue();\r\n        Venue v1 = new Venue(venue, Integer.parseInt(guests.getText()));\r\n        no_of_guests = Integer.parseInt(guests.getText());\r\n        v1.setCapacity();\r\n        totalCapacity = v1.getCapacity();\r\n        String booking_status = v1.getBookingStatus(sd, ed);\r\n        double Final_Cost;\r\n        if (booking_status.compareToIgnoreCase(\"Available\") == 0) {\r\n            int next_booking_id = Integer.parseInt(GetBookingID());\r\n            w1.setBookingStatus(\"Booked\");\r\n            w1.setStartDate(sd);\r\n            w1.setEndDate(ed);\r\n            w1.setVenue(v1);\r\n            Venue_cost = w1.CalculateCost();\r\n            Final_Cost = Venue_cost;\r\n            DisplayInformationLabel.setText(\"\\nVenue Cost : \" + (Venue_cost)\r\n                            + \"\\nFinal_Cost = \" + (Final_Cost));\r\n        }\r\n    }\r\n    protected void Add_to_DB() throws SQLException {\r\n        Send_Data_Between instance = Send_Data_Between.getInstance();\r\n        Customer c1 = instance.getCustomer();\r\n        String LoginID = c1.getLoginId();\r\n        Connection dbcon = Connect.createConnection();\r\n        String Query1 = \"select * from customer where LoginID = ?\";\r\n        PreparedStatement ps = dbcon.prepareStatement(Query1);\r\n        ps.setString(1,LoginID);\r\n        ResultSet rs = ps.executeQuery();\r\n        String name=\"\",email=\"\",ph_number=\"\";\r\n        if(rs.next())\r\n        {\r\n            name = rs.getString(3);\r\n            email = rs.getString(6);\r\n            ph_number = rs.getString(5);\r\n        }\r\n\r\n        String query2 = \"insert into bookinghistory values(?,?,?,?,?,?,?,?)\";\r\n        PreparedStatement ps1 = dbcon.prepareStatement(query2);\r\n        ps1.setString(1,GetBookingID());\r\n        ps1.setString(2,name);\r\n        ps1.setString(3,email);\r\n        ps1.setString(4,ph_number);\r\n        ps1.setString(5,myChoice_venue);\r\n        ps1.setString(6,w1.getStartDate().toString());\r\n        ps1.setString(7,w1.getEndDate().toString());\r\n        ps1.setString(8,\"Booked\");\r\n        ps1.executeUpdate();\r\n    }\r\n    public static String managerDetails(){\r\n        Connection conn= Connect.createConnection();\r\n        StringBuilder ans=new StringBuilder();\r\n        ans.append(\"Contact the following for more details\");\r\n        try{String query=\"Select * from manager\";\r\n            Statement preStatement=conn.prepareStatement(query);\r\n            ResultSet rs=preStatement.executeQuery(query);\r\n            while(rs.next()){\r\n                ans.append(\"\\nName \").append(rs.getString(\"name\")).append(\" Contact \").append(rs.getString(\"phonenumber\"));\r\n            }\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally{\r\n            Connect.closeConnection();\r\n        }\r\n        return ans.toString();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/tfj_gui/gui/NewBookingCustomViewController.java b/GUI/src/main/java/tfj_gui/gui/NewBookingCustomViewController.java
--- a/GUI/src/main/java/tfj_gui/gui/NewBookingCustomViewController.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/tfj_gui/gui/NewBookingCustomViewController.java	(date 1669212340146)
@@ -2,6 +2,7 @@
 
 import Database.DBconnection.Connect;
 import Database.TableView.Custom;
+import Database.TableView.Event;
 import Database.TableView.Venue;
 import Database.TableView.Wedding;
 import Login.Customer;
@@ -184,6 +185,7 @@
             SetBooking();
             if (w1.getBookingStatus().compareToIgnoreCase("Booked") == 0) {
                 Add_to_DB();
+                UpdateEvent();
                 Send_Data_Between inst = Send_Data_Between.getInstance();
                 if (inst.getCheck() == 1) {
                     ManagerControllerFunctions.GoToHome(event);
@@ -352,5 +354,12 @@
             Connect.closeConnection();
         }
         return ans.toString();
+    }
+    public void UpdateEvent() throws SQLException {
+        Send_Data_Between need=Send_Data_Between.getInstance();
+        Customer k=need.getCustomer();
+        Customer c=Customer.getDetailsCustomer(k.getLoginId());
+        Event.updateEvent(w1,c,Integer.parseInt(GetBookingID()),guests1.getText());
+
     }
 }
Index: GUI/src/main/java/tfj_gui/gui/MyBookingsViewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tfj_gui.gui;\r\n\r\nimport Database.TableView.BookingHistory;\r\nimport Database.TableView.ManagerDatabase;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class MyBookingsViewController implements Initializable {\r\n    @FXML\r\n    private TableColumn<BookingHistory,String> NameColumn;\r\n    @FXML\r\n    private TableColumn<BookingHistory,String> EmailColumn;\r\n    @FXML\r\n    private TableColumn<BookingHistory,String> PhoneNumberColumn;\r\n    @FXML\r\n    private TableColumn<BookingHistory,String> VenueColumn;\r\n    @FXML\r\n    private TableColumn<BookingHistory,String> StartDateColumn;\r\n    @FXML\r\n    private TableColumn<BookingHistory,String> EndDateColumn;\r\n    @FXML\r\n    private TableView<BookingHistory> tableview;\r\n    @FXML\r\n    private Button HomeButton;\r\n    @FXML\r\n    private Button NewBookingButton;\r\n    @FXML\r\n    private Button MyAccountButton;\r\n    @FXML\r\n    private Button MyBookingsButton;\r\n    @FXML\r\n    private Button ChangePasswordButton;\r\n    @FXML\r\n    private Button AboutUsButton;\r\n    @FXML\r\n    private Button HelpButton;\r\n    @FXML\r\n    private Button LogoutButton;\r\n    @FXML\r\n    private Button ExitButton;\r\n    @FXML\r\n    protected void GoToHome(ActionEvent event) throws IOException\r\n    {\r\n        ControllerFunctions.GoToHome(event);\r\n    }\r\n    @FXML\r\n    protected void NewBookingButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        ControllerFunctions.NewBookingButtonClicked(event);\r\n    }\r\n    @FXML\r\n    protected void MyAccountButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        ControllerFunctions.MyAccountButtonClicked(event);\r\n    }\r\n    @FXML\r\n    protected void MyBookingsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        ControllerFunctions.MyBookingsButtonClicked(event);\r\n    }\r\n    @FXML\r\n    protected void ChangePasswordButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        ControllerFunctions.ChangePasswordButtonClicked(event);\r\n    }\r\n    @FXML\r\n    protected void AboutUsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        ControllerFunctions.AboutUsButtonClicked(event);\r\n    }\r\n    @FXML\r\n    protected void HelpButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        ControllerFunctions.HelpButtonClicked(event);\r\n    }\r\n    @FXML\r\n    protected void LogoutButtonClicked(ActionEvent event) throws IOException {\r\n        ControllerFunctions.LogoutButtonClicked(event);\r\n    }\r\n    @FXML\r\n    protected void ExitButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        ControllerFunctions.ExitButtonClicked(event);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        NameColumn.setCellValueFactory(new PropertyValueFactory<>(\"Name\"));\r\n        EmailColumn.setCellValueFactory(new PropertyValueFactory<>(\"Email\"));\r\n        PhoneNumberColumn.setCellValueFactory(new PropertyValueFactory<>(\"PhoneNumber\"));\r\n        VenueColumn.setCellValueFactory(new PropertyValueFactory<>(\"HallName\"));\r\n        StartDateColumn.setCellValueFactory(new PropertyValueFactory<>(\"StartDate\"));\r\n        EndDateColumn.setCellValueFactory(new PropertyValueFactory<>(\"EndDate\"));\r\n        ManagerDatabase m=new ManagerDatabase();\r\n        Send_Data_Between need=Send_Data_Between.getInstance();\r\n        try {\r\n            tableview.setItems(m.GetCustomerDetails(need.getCustomer().getLoginId()));\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/tfj_gui/gui/MyBookingsViewController.java b/GUI/src/main/java/tfj_gui/gui/MyBookingsViewController.java
--- a/GUI/src/main/java/tfj_gui/gui/MyBookingsViewController.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/tfj_gui/gui/MyBookingsViewController.java	(date 1669207457040)
@@ -21,6 +21,10 @@
 
 public class MyBookingsViewController implements Initializable {
     @FXML
+    private TableColumn<BookingHistory,String> BookingID;
+    @FXML
+    private TableColumn<BookingHistory,String> Status;
+    @FXML
     private TableColumn<BookingHistory,String> NameColumn;
     @FXML
     private TableColumn<BookingHistory,String> EmailColumn;
@@ -105,6 +109,8 @@
         VenueColumn.setCellValueFactory(new PropertyValueFactory<>("HallName"));
         StartDateColumn.setCellValueFactory(new PropertyValueFactory<>("StartDate"));
         EndDateColumn.setCellValueFactory(new PropertyValueFactory<>("EndDate"));
+        Status.setCellValueFactory(new PropertyValueFactory<>("Status"));
+        BookingID.setCellValueFactory(new PropertyValueFactory<>("BookinID"));
         ManagerDatabase m=new ManagerDatabase();
         Send_Data_Between need=Send_Data_Between.getInstance();
         try {
Index: GUI/src/main/java/tfj_gui/gui/NewBookingNewYearViewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tfj_gui.gui;\r\n\r\nimport Database.DBconnection.Connect;\r\nimport Database.TableView.Menu;\r\nimport Database.TableView.*;\r\nimport Login.Customer;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.*;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class NewBookingNewYearViewController implements Initializable\r\n{\r\n    @FXML\r\n    public Label DisplayInformationLabel;\r\n    @FXML\r\n    public Label RemarVenue;\r\n    @FXML\r\n    private Button HomeButton;\r\n    @FXML\r\n    private Button NewBookingButton;\r\n    @FXML\r\n    private Button MyAccountButton;\r\n    @FXML\r\n    private Button MyBookingsButton;\r\n    @FXML\r\n    private Button ChangePasswordButton;\r\n    @FXML\r\n    private Button AboutUsButton;\r\n    @FXML\r\n    private Button HelpButton;\r\n    @FXML\r\n    private Button LogoutButton;\r\n    @FXML\r\n    private Button ExitButton;\r\n    @FXML\r\n    private Button Next1;\r\n    @FXML\r\n    private Button GoBack;\r\n    @FXML\r\n    protected void GoToHome(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.GoToHome(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.GoToHome(event);}\r\n        else{\r\n            ControllerFunctions.GoToHome(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void NewBookingButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n\r\n    }\r\n    @FXML\r\n    protected void MyAccountButtonClicked(ActionEvent event) throws IOException\r\n    {   Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.MyAccountButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.MyAccountButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void MyBookingsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.MyBookingsButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.MyBookingsButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.MyBookingsButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void ChangePasswordButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.ChangePasswordButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.ChangePasswordButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.ChangePasswordButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void AboutUsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.AboutUsButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.AboutUsButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.AboutUsButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void HelpButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.HelpButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.HelpButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.HelpButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void LogoutButtonClicked(ActionEvent event) throws IOException {\r\n        //ControllerFunctions.LogoutButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.LogoutButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.LogoutButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void ExitButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.ExitButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.ExitButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.ExitButtonClicked(event);\r\n        }\r\n    }\r\n    private final String[] Drinks_Choices = {\"Lemon juice\",\"Orange juice\",\"Mixed fruit juice\",\"Beer\",\"---None---\"};\r\n    private final String[] Venue_Choices = new Venue().getAllVenueNames().toArray(new String[0]);\r\n    private final String[] Decoration_Choices = {\"PtaNahi\",\"PtaNahi1\",\"PtaNahi2\"};\r\n    private final String[] Lunch_Choices ={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Snacks_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Breakfast_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Dinner_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n\r\n    @FXML\r\n    private ChoiceBox<String> Decoration_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Breakfast_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Drinks_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Venue_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Lunch_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Snacks_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Dinner_choicebox;\r\n    @FXML\r\n    private TextField guests;\r\n    @FXML\r\n    private Button GetCost;\r\n\r\n    //@Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        Breakfast_choicebox.getItems().addAll();\r\n        Breakfast_choicebox.setOnAction(this::Choice_in_Choice_box_breakfast);\r\n\r\n        Drinks_choicebox.getItems().addAll(Drinks_Choices);\r\n        Drinks_choicebox.setOnAction(this::Choice_in_Choice_box_drinks);\r\n\r\n        Venue_choicebox.getItems().addAll(Venue_Choices);\r\n        Venue_choicebox.setOnAction(this::Choice_in_Choice_box_venue);\r\n\r\n        Decoration_choicebox.getItems().addAll(Decoration_Choices);\r\n        Decoration_choicebox.setOnAction(this::Choice_in_Choice_box_decoration);\r\n\r\n        Breakfast_choicebox.getItems().addAll(Breakfast_Choices);\r\n        Breakfast_choicebox.setOnAction((this::Choice_in_Choice_box_breakfast));\r\n\r\n        Lunch_choicebox.getItems().addAll(Lunch_Choices);\r\n        Lunch_choicebox.setOnAction((this::Choice_in_Choice_box_lunch));\r\n\r\n        Snacks_choicebox.getItems().addAll(Snacks_Choices);\r\n        Snacks_choicebox.setOnAction((this::Choice_in_Choice_box_snacks));\r\n\r\n        Dinner_choicebox.getItems().addAll(Dinner_Choices);\r\n        Dinner_choicebox.setOnAction((this::Choice_in_Choice_box_dinner));\r\n    }\r\n    private String getDescription(){\r\n        String desc=\"\";\r\n        Connection con=Connect.createConnection();\r\n        try {\r\n            Statement stmt = con.createStatement();\r\n            String query=\"Select * from venue where name='\"+(myChoice_venue)+\"'\";\r\n            ResultSet rs=stmt.executeQuery(query);\r\n            if(rs.next()){\r\n                desc=\"Capacity=\"+(rs.getInt(3))+\"\\nPrice per day :-\"+(rs.getInt(4))+\"\\n\"+(rs.getString(5));\r\n            }\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally {\r\n            Connect.closeConnection();\r\n        }\r\n        return desc;\r\n    }\r\n    private String myChoice_decoration,myChoice_breakfast,myChoice_Drinks,myChoice_venue,myChoice_Lunch,myChoice_Snacks,myChoice_Dinner;\r\n    protected void Choice_in_Choice_box_decoration(ActionEvent event)\r\n    {\r\n        myChoice_decoration=Decoration_choicebox.getValue();\r\n    }\r\n    protected void Choice_in_Choice_box_drinks(ActionEvent event)\r\n    {\r\n        myChoice_Drinks=Drinks_choicebox.getValue();\r\n        System.out.println(myChoice_Drinks);\r\n    }\r\n    protected void Choice_in_Choice_box_venue(ActionEvent event)\r\n    {\r\n        myChoice_venue=Venue_choicebox.getValue();\r\n        RemarVenue.setText(getDescription());\r\n    }\r\n    protected void Choice_in_Choice_box_breakfast(ActionEvent event)\r\n    {\r\n        myChoice_breakfast=Breakfast_choicebox.getValue();\r\n        System.out.println(myChoice_breakfast);\r\n    }\r\n    protected void Choice_in_Choice_box_lunch(ActionEvent event)\r\n    {\r\n        myChoice_Lunch=Lunch_choicebox.getValue();\r\n        System.out.println(myChoice_Lunch);\r\n    }\r\n    protected void Choice_in_Choice_box_snacks(ActionEvent event)\r\n    {\r\n        myChoice_Snacks=Snacks_choicebox.getValue();\r\n        System.out.println(myChoice_Snacks);\r\n    }\r\n    protected void Choice_in_Choice_box_dinner(ActionEvent event)\r\n    {\r\n        myChoice_Dinner=Dinner_choicebox.getValue();\r\n        System.out.println(myChoice_Dinner);\r\n    }\r\n\r\n    @FXML\r\n    private DatePicker Start_Date = new DatePicker();\r\n    protected void getStartDate(ActionEvent event)\r\n    {\r\n        LocalDate SD = Start_Date.getValue();\r\n    }\r\n\r\n    @FXML\r\n    private DatePicker End_Date = new DatePicker();\r\n    protected void getEndDate(ActionEvent event)\r\n    {\r\n        LocalDate ED = End_Date.getValue();\r\n    }\r\n    private double Cost;\r\n    @FXML\r\n    protected void NextNewBooking(ActionEvent event) throws IOException, SQLException {\r\n        Venue v=new Venue(myChoice_venue,no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity=v.getCapacity();\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        if(totalCapacity<no_of_guests){\r\n            DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n        }\r\n        else{\r\n            SetBooking();\r\n            if(w1.getBookingStatus().compareToIgnoreCase(\"Booked\")==0) {\r\n                Add_to_DB();\r\n                Send_Data_Between inst = Send_Data_Between.getInstance();\r\n                if (inst.getCheck() == 1) {\r\n                    ManagerControllerFunctions.GoToHome(event);\r\n                } else {\r\n                    ControllerFunctions.GoToHome(event);\r\n                }\r\n            }\r\n            else DisplayInformationLabel.setText(\"Venue not available\");}\r\n    }\r\n    @FXML\r\n    protected void DisplayFinalCost(ActionEvent event)\r\n    {   Venue v=new Venue(myChoice_venue,no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity=v.getCapacity();\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        if(totalCapacity<no_of_guests){\r\n            DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n        }\r\n        else SetBooking();\r\n        //DisplayInformationLabel.setText(\"Breakfast\");\r\n    }\r\n\r\n    @FXML\r\n    protected void ReturnToHome(ActionEvent event) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"NewBooking_View.fxml\"));\r\n        Stage stage= (Stage) ((Node)event.getSource()).getScene().getWindow();\r\n        Scene scene = new Scene(fxmlLoader.load(),1080,720);\r\n        stage.setTitle(\"THE FUNCTION JUNCTION\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private String Name;\r\n    private String Email;\r\n    private String PhNumber;\r\n    private int totalCapacity;\r\n    private int no_of_guests;\r\n    public void getPass(String loginID){\r\n        String password=\"\";\r\n        try{\r\n            Connection conn= Connect.createConnection();\r\n            String query=\"Select * from customer where loginid=?\";\r\n            PreparedStatement preStatement=conn.prepareStatement(query);\r\n            preStatement.setString(1,loginID);\r\n            ResultSet rs=preStatement.executeQuery();\r\n            if(rs.next()){\r\n                Name = rs.getString(\"Name\");\r\n                Email = rs.getString(\"Email\");\r\n                PhNumber = rs.getString(\"PhoneNumber\");\r\n            }\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally{\r\n            Connect.closeConnection();\r\n        }\r\n    }\r\n    protected String GetBookingID()\r\n    {\r\n        String bookingid=\"\";\r\n        Connection c = Connect.createConnection();\r\n        try{\r\n            String query=\"Select max(BookingID) from bookinghistory\";\r\n            Statement s1 = c.createStatement();\r\n            ResultSet rs = s1.executeQuery(query);\r\n            if(rs.next())\r\n            {\r\n                bookingid = rs.getString(1);\r\n                int bs = Integer.parseInt(bookingid)+1;\r\n                bookingid = String.valueOf(bs);\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return bookingid;\r\n    }\r\n    ArrayList<Menu> menu;\r\n    double Venue_cost;\r\n    double Breakfast_cost;\r\n    double Lunch_cost;\r\n    double Snacks_cost;\r\n    double Drinks_cost;\r\n    double Dinner_cost;\r\n    NewYear w1 = new NewYear();\r\n    protected void SetBooking()\r\n    {\r\n\r\n        LocalDate startdate = Start_Date.getValue();\r\n        LocalDate enddate = End_Date.getValue();\r\n        Date sd = Date.valueOf(startdate);\r\n        Date ed = Date.valueOf(enddate);\r\n        String venue = Venue_choicebox.getValue();\r\n        Venue v1 = new Venue(venue,Integer.parseInt(guests.getText()));\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        v1.setCapacity();\r\n        totalCapacity=v1.getCapacity();\r\n        String booking_status = v1.getBookingStatus(sd,ed);\r\n\r\n        BreakFast b1 = new BreakFast();\r\n        b1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            b1.setBf_class(myChoice_breakfast);\r\n            Breakfast_cost = b1.calculateCost();}\r\n        else{\r\n            Breakfast_cost=0;\r\n        }\r\n        Lunch l1 = new Lunch();\r\n        l1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            l1.setLunch_class(myChoice_Lunch);\r\n            Lunch_cost = l1.calculateCost();}\r\n        else{\r\n            Lunch_cost=0;\r\n        }\r\n\r\n        Snacks s1 = new Snacks();\r\n        s1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            s1.setSnack_class(myChoice_Snacks);\r\n            Snacks_cost = s1.calculateCost();}\r\n        else{\r\n            Snacks_cost=0;\r\n        }\r\n\r\n        Dinner d1 = new Dinner();\r\n        d1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            d1.setDinner_class(myChoice_Dinner);\r\n            Dinner_cost = d1.calculateCost();}\r\n        else{\r\n            Dinner_cost=0;\r\n        }\r\n\r\n        Drinks dr1 = new Drinks();\r\n        int drinks_index=0;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[0]))     drinks_index=1;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[1]))     drinks_index=2;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[2]))     drinks_index=3;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[3]))     drinks_index=4;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[4]))     drinks_index=0;\r\n        dr1.setMyChoice(drinks_index);\r\n        dr1.setNumberOfGuests(no_of_guests);\r\n        Drinks_cost = dr1.calculateCost();\r\n        double Menu_Cost = Breakfast_cost + Lunch_cost + Snacks_cost + Drinks_cost + Dinner_cost;\r\n        System.out.print(Menu_Cost);\r\n        double Final_Cost;\r\n        if(booking_status.compareToIgnoreCase(\"Available\") == 0)\r\n        {\r\n            int next_booking_id = Integer.parseInt(GetBookingID());\r\n            w1.setBookingStatus(\"Booked\");\r\n            w1.setChoice(myChoice_decoration);\r\n            w1.setStartDate(sd);\r\n            w1.setEndDate(ed);\r\n            w1.setVenue(v1);\r\n            Venue_cost = w1.CalculateCost();\r\n            System.out.print(Venue_cost);\r\n            Final_Cost = Venue_cost + Menu_Cost;\r\n            DisplayInformationLabel.setText(\"Breakfast Cost : \"+(Breakfast_cost)+\"\\nLunch Cost : \"+(Lunch_cost)\r\n                    +\"\\nDrinks Cost : \"+(Drinks_cost)\r\n                    +\"\\nSnacks Cost : \"+(Snacks_cost)\r\n                    +\"\\nDinner Cost : \"+(Dinner_cost)\r\n                    +\"\\nVenue Cost : \" +(Venue_cost)\r\n                    +\"\\nFinal_Cost = \"+(Final_Cost));\r\n        }\r\n//        else\r\n//        {\r\n//            DisplayInformationLabel.setText(\"Hall not available.\");\r\n//        }\r\n    }\r\n\r\n    protected void Add_to_DB() throws SQLException {\r\n        Send_Data_Between instance = Send_Data_Between.getInstance();\r\n        String LoginID = instance.getLoginIDCust();\r\n        Connection dbcon = Connect.createConnection();\r\n        String Query1 = \"select * from customer where LoginID = ?\";\r\n        PreparedStatement ps = dbcon.prepareStatement(Query1);\r\n        ps.setString(1,LoginID);\r\n        ResultSet rs = ps.executeQuery();\r\n        String name=\"\",email=\"\",ph_number=\"\";\r\n        if(rs.next())\r\n        {\r\n            name = rs.getString(3);\r\n            email = rs.getString(6);\r\n            ph_number = rs.getString(5);\r\n        }\r\n\r\n        String query2 = \"insert into bookinghistory values(?,?,?,?,?,?,?,?)\";\r\n        PreparedStatement ps1 = dbcon.prepareStatement(query2);\r\n        ps1.setString(1,GetBookingID());\r\n        ps1.setString(2,name);\r\n        ps1.setString(3,email);\r\n        ps1.setString(4,ph_number);\r\n        ps1.setString(5,myChoice_venue);\r\n        ps1.setString(6,w1.getStartDate().toString());\r\n        ps1.setString(7,w1.getEndDate().toString());\r\n        ps1.setString(8,\"Booked\");\r\n        ps1.executeUpdate();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/tfj_gui/gui/NewBookingNewYearViewController.java b/GUI/src/main/java/tfj_gui/gui/NewBookingNewYearViewController.java
--- a/GUI/src/main/java/tfj_gui/gui/NewBookingNewYearViewController.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/tfj_gui/gui/NewBookingNewYearViewController.java	(date 1669212340174)
@@ -274,6 +274,7 @@
             SetBooking();
             if(w1.getBookingStatus().compareToIgnoreCase("Booked")==0) {
                 Add_to_DB();
+                UpdateEvent();
                 Send_Data_Between inst = Send_Data_Between.getInstance();
                 if (inst.getCheck() == 1) {
                     ManagerControllerFunctions.GoToHome(event);
@@ -473,5 +474,12 @@
         ps1.setString(7,w1.getEndDate().toString());
         ps1.setString(8,"Booked");
         ps1.executeUpdate();
+    }
+    public void UpdateEvent() throws SQLException {
+        Send_Data_Between need=Send_Data_Between.getInstance();
+        Customer k=need.getCustomer();
+        Customer c=Customer.getDetailsCustomer(k.getLoginId());
+        Event.updateEvent(w1,c,Integer.parseInt(GetBookingID()),"NewYear");
+
     }
 }
Index: GUI/src/main/java/tfj_gui/gui/NewBookingConferenceViewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tfj_gui.gui;\r\n\r\nimport Database.DBconnection.Connect;\r\nimport Database.TableView.Menu;\r\nimport Database.TableView.*;\r\nimport Login.Customer;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.*;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class NewBookingConferenceViewController implements Initializable\r\n{\r\n    @FXML\r\n    public Label DisplayInformationLabel;\r\n    @FXML\r\n    public Label RemarVenue;\r\n    @FXML\r\n    private Button HomeButton;\r\n    @FXML\r\n    private Button NewBookingButton;\r\n    @FXML\r\n    private Button MyAccountButton;\r\n    @FXML\r\n    private Button MyBookingsButton;\r\n    @FXML\r\n    private Button ChangePasswordButton;\r\n    @FXML\r\n    private Button AboutUsButton;\r\n    @FXML\r\n    private Button HelpButton;\r\n    @FXML\r\n    private Button LogoutButton;\r\n    @FXML\r\n    private Button ExitButton;\r\n    @FXML\r\n    private Button Next1;\r\n    @FXML\r\n    private Button GoBack;\r\n    @FXML\r\n    protected void GoToHome(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.GoToHome(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.GoToHome(event);}\r\n        else{\r\n            ControllerFunctions.GoToHome(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void NewBookingButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n\r\n    }\r\n    @FXML\r\n    protected void MyAccountButtonClicked(ActionEvent event) throws IOException\r\n    {   Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.MyAccountButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.MyAccountButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void MyBookingsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.MyBookingsButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.MyBookingsButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.MyBookingsButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void ChangePasswordButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.ChangePasswordButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.ChangePasswordButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.ChangePasswordButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void AboutUsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.AboutUsButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.AboutUsButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.AboutUsButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void HelpButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.HelpButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.HelpButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.HelpButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void LogoutButtonClicked(ActionEvent event) throws IOException {\r\n        //ControllerFunctions.LogoutButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.LogoutButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.LogoutButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void ExitButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        //ControllerFunctions.ExitButtonClicked(event);\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.ExitButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.ExitButtonClicked(event);\r\n        }\r\n    }\r\n    private final String[] Drinks_Choices = {\"Lemon juice\",\"Orange juice\",\"Mixed fruit juice\",\"Beer\",\"---None---\"};\r\n    private final String[] Venue_Choices = new Venue().getAllVenueNames().toArray(new String[0]);\r\n    private final String[] Decoration_Choices = {\"UShape\",\"HollowSquare\",\"BoardroomStyle\"};\r\n    private final String[] Lunch_Choices ={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Snacks_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Breakfast_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Dinner_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n\r\n    @FXML\r\n    private ChoiceBox<String> Decoration_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Breakfast_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Drinks_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Venue_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Lunch_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Snacks_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Dinner_choicebox;\r\n    @FXML\r\n    private TextField guests;\r\n    @FXML\r\n    private Button GetCost;\r\n\r\n    //@Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        Breakfast_choicebox.getItems().addAll();\r\n        Breakfast_choicebox.setOnAction(this::Choice_in_Choice_box_breakfast);\r\n\r\n        Drinks_choicebox.getItems().addAll(Drinks_Choices);\r\n        Drinks_choicebox.setOnAction(this::Choice_in_Choice_box_drinks);\r\n\r\n        Venue_choicebox.getItems().addAll(Venue_Choices);\r\n        Venue_choicebox.setOnAction(this::Choice_in_Choice_box_venue);\r\n\r\n        Decoration_choicebox.getItems().addAll(Decoration_Choices);\r\n        Decoration_choicebox.setOnAction(this::Choice_in_Choice_box_decoration);\r\n\r\n        Breakfast_choicebox.getItems().addAll(Breakfast_Choices);\r\n        Breakfast_choicebox.setOnAction((this::Choice_in_Choice_box_breakfast));\r\n\r\n        Lunch_choicebox.getItems().addAll(Lunch_Choices);\r\n        Lunch_choicebox.setOnAction((this::Choice_in_Choice_box_lunch));\r\n\r\n        Snacks_choicebox.getItems().addAll(Snacks_Choices);\r\n        Snacks_choicebox.setOnAction((this::Choice_in_Choice_box_snacks));\r\n\r\n        Dinner_choicebox.getItems().addAll(Dinner_Choices);\r\n        Dinner_choicebox.setOnAction((this::Choice_in_Choice_box_dinner));\r\n    }\r\n    private String getDescription(){\r\n        String desc=\"\";\r\n        Connection con=Connect.createConnection();\r\n        try {\r\n            Statement stmt = con.createStatement();\r\n            String query=\"Select * from venue where name='\"+(myChoice_venue)+\"'\";\r\n            ResultSet rs=stmt.executeQuery(query);\r\n            if(rs.next()){\r\n                desc=\"Capacity=\"+(rs.getInt(3))+\"\\nPrice per day :-\"+(rs.getInt(4))+\"\\n\"+(rs.getString(5));\r\n            }\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally {\r\n            Connect.closeConnection();\r\n        }\r\n        return desc;\r\n    }\r\n    private String myChoice_decoration,myChoice_breakfast,myChoice_Drinks,myChoice_venue,myChoice_Lunch,myChoice_Snacks,myChoice_Dinner;\r\n    protected void Choice_in_Choice_box_decoration(ActionEvent event)\r\n    {\r\n        myChoice_decoration=Decoration_choicebox.getValue();\r\n    }\r\n    protected void Choice_in_Choice_box_drinks(ActionEvent event)\r\n    {\r\n        myChoice_Drinks=Drinks_choicebox.getValue();\r\n        System.out.println(myChoice_Drinks);\r\n    }\r\n    protected void Choice_in_Choice_box_venue(ActionEvent event)\r\n    {\r\n        myChoice_venue=Venue_choicebox.getValue();\r\n        RemarVenue.setText(getDescription());\r\n    }\r\n    protected void Choice_in_Choice_box_breakfast(ActionEvent event)\r\n    {\r\n        myChoice_breakfast=Breakfast_choicebox.getValue();\r\n        System.out.println(myChoice_breakfast);\r\n    }\r\n    protected void Choice_in_Choice_box_lunch(ActionEvent event)\r\n    {\r\n        myChoice_Lunch=Lunch_choicebox.getValue();\r\n        System.out.println(myChoice_Lunch);\r\n    }\r\n    protected void Choice_in_Choice_box_snacks(ActionEvent event)\r\n    {\r\n        myChoice_Snacks=Snacks_choicebox.getValue();\r\n        System.out.println(myChoice_Snacks);\r\n    }\r\n    protected void Choice_in_Choice_box_dinner(ActionEvent event)\r\n    {\r\n        myChoice_Dinner=Dinner_choicebox.getValue();\r\n        System.out.println(myChoice_Dinner);\r\n    }\r\n\r\n    @FXML\r\n    private DatePicker Start_Date = new DatePicker();\r\n    protected void getStartDate(ActionEvent event)\r\n    {\r\n        LocalDate SD = Start_Date.getValue();\r\n    }\r\n\r\n    @FXML\r\n    private DatePicker End_Date = new DatePicker();\r\n    protected void getEndDate(ActionEvent event)\r\n    {\r\n        LocalDate ED = End_Date.getValue();\r\n    }\r\n    private double Cost;\r\n    @FXML\r\n    protected void NextNewBooking(ActionEvent event) throws IOException, SQLException {\r\n        Venue v=new Venue(myChoice_venue,no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity=v.getCapacity();\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        if(totalCapacity<no_of_guests){\r\n            DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n        }\r\n        else{\r\n        SetBooking();\r\n        if(w1.getBookingStatus().compareToIgnoreCase(\"Booked\")==0)     {Add_to_DB();\r\n            Send_Data_Between inst = Send_Data_Between.getInstance();\r\n            if (inst.getCheck() == 1) {\r\n                ManagerControllerFunctions.GoToHome(event);\r\n            } else {\r\n                ControllerFunctions.GoToHome(event);\r\n            }}\r\n        else DisplayInformationLabel.setText(\"Venue not available\");}\r\n    }\r\n    @FXML\r\n    protected void DisplayFinalCost(ActionEvent event)\r\n    {   Venue v=new Venue(myChoice_venue,no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity=v.getCapacity();\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        if(totalCapacity<no_of_guests){\r\n        DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n    }\r\n    else SetBooking();\r\n        //DisplayInformationLabel.setText(\"Breakfast\");\r\n    }\r\n    @FXML\r\n    protected void ReturnToHome(ActionEvent event) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"NewBooking_View.fxml\"));\r\n        Stage stage= (Stage) ((Node)event.getSource()).getScene().getWindow();\r\n        Scene scene = new Scene(fxmlLoader.load(),1080,720);\r\n        stage.setTitle(\"THE FUNCTION JUNCTION\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n\r\n    private String Name;\r\n    private String Email;\r\n    private String PhNumber;\r\n    private int totalCapacity;\r\n    private int no_of_guests;\r\n    public void getPass(String loginID){\r\n        String password=\"\";\r\n        try{\r\n            Connection conn= Connect.createConnection();\r\n            String query=\"Select * from customer where loginid=?\";\r\n            PreparedStatement preStatement=conn.prepareStatement(query);\r\n            preStatement.setString(1,loginID);\r\n            ResultSet rs=preStatement.executeQuery();\r\n            if(rs.next()){\r\n                Name = rs.getString(\"Name\");\r\n                Email = rs.getString(\"Email\");\r\n                PhNumber = rs.getString(\"PhoneNumber\");\r\n            }\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally{\r\n            Connect.closeConnection();\r\n        }\r\n    }\r\n    protected String GetBookingID()\r\n    {\r\n        String bookingid=\"\";\r\n        Connection c = Connect.createConnection();\r\n        try{\r\n            String query=\"Select max(BookingID) from bookinghistory\";\r\n            Statement s1 = c.createStatement();\r\n            ResultSet rs = s1.executeQuery(query);\r\n            if(rs.next())\r\n            {\r\n                bookingid = rs.getString(1);\r\n                int bs = Integer.parseInt(bookingid)+1;\r\n                bookingid = String.valueOf(bs);\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return bookingid;\r\n    }\r\n    ArrayList<Menu> menu;\r\n    double Venue_cost;\r\n    double Breakfast_cost;\r\n    double Lunch_cost;\r\n    double Snacks_cost;\r\n    double Drinks_cost;\r\n    double Dinner_cost;\r\n    Conference w1 = new Conference();\r\n    protected void SetBooking()\r\n    {\r\n\r\n        LocalDate startdate = Start_Date.getValue();\r\n        LocalDate enddate = End_Date.getValue();\r\n        Date sd = Date.valueOf(startdate);\r\n        Date ed = Date.valueOf(enddate);\r\n        String venue = Venue_choicebox.getValue();\r\n        Venue v1 = new Venue(venue,Integer.parseInt(guests.getText()));\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        v1.setCapacity();\r\n        totalCapacity=v1.getCapacity();\r\n        String booking_status = v1.getBookingStatus(sd,ed);\r\n\r\n        BreakFast b1 = new BreakFast();\r\n        b1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n        b1.setBf_class(myChoice_breakfast);\r\n        Breakfast_cost = b1.calculateCost();}\r\n        else{\r\n            Breakfast_cost=0;\r\n        }\r\n        Lunch l1 = new Lunch();\r\n        l1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            l1.setLunch_class(myChoice_Lunch);\r\n            Lunch_cost = l1.calculateCost();}\r\n        else{\r\n            Lunch_cost=0;\r\n        }\r\n\r\n        Snacks s1 = new Snacks();\r\n        s1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            s1.setSnack_class(myChoice_Snacks);\r\n            Snacks_cost = s1.calculateCost();}\r\n        else{\r\n            Snacks_cost=0;\r\n        }\r\n\r\n        Dinner d1 = new Dinner();\r\n        d1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            d1.setDinner_class(myChoice_Dinner);\r\n            Dinner_cost = d1.calculateCost();}\r\n        else{\r\n            Dinner_cost=0;\r\n        }\r\n\r\n        Drinks dr1 = new Drinks();\r\n        int drinks_index=0;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[0]))     drinks_index=1;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[1]))     drinks_index=2;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[2]))     drinks_index=3;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[3]))     drinks_index=4;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[4]))     drinks_index=0;\r\n        dr1.setMyChoice(drinks_index);\r\n        dr1.setNumberOfGuests(no_of_guests);\r\n        Drinks_cost = dr1.calculateCost();\r\n        double Menu_Cost = Breakfast_cost + Lunch_cost + Snacks_cost + Drinks_cost + Dinner_cost;\r\n        System.out.print(Menu_Cost);\r\n        double Final_Cost;\r\n        if(booking_status.compareToIgnoreCase(\"Available\") == 0)\r\n        {\r\n            int next_booking_id = Integer.parseInt(GetBookingID());\r\n            w1.setBookingStatus(\"Booked\");\r\n            w1.setChoice(myChoice_decoration);\r\n            w1.setStartDate(sd);\r\n            w1.setEndDate(ed);\r\n            w1.setVenue(v1);\r\n            Venue_cost = w1.CalculateCost();\r\n            System.out.print(Venue_cost);\r\n            Final_Cost = Venue_cost + Menu_Cost;\r\n            DisplayInformationLabel.setText(\"Breakfast Cost : \"+(Breakfast_cost)+\"\\nLunch Cost : \"+(Lunch_cost)\r\n            +\"\\nDrinks Cost : \"+(Drinks_cost)\r\n            +\"\\nSnacks Cost : \"+(Snacks_cost)\r\n            +\"\\nDinner Cost : \"+(Dinner_cost)\r\n            +\"\\nVenue Cost : \" +(Venue_cost)\r\n            +\"\\nFinal_Cost = \"+(Final_Cost));\r\n        }\r\n//        else\r\n//        {\r\n//            DisplayInformationLabel.setText(\"Hall not available.\");\r\n//        }\r\n    }\r\n\r\n    protected void Add_to_DB() throws SQLException {\r\n        Send_Data_Between instance = Send_Data_Between.getInstance();\r\n        String LoginID = instance.getLoginIDCust();\r\n        Connection dbcon = Connect.createConnection();\r\n        String Query1 = \"select * from customer where LoginID = ?\";\r\n        PreparedStatement ps = dbcon.prepareStatement(Query1);\r\n        ps.setString(1,LoginID);\r\n        ResultSet rs = ps.executeQuery();\r\n        String name=\"\",email=\"\",ph_number=\"\";\r\n        if(rs.next())\r\n        {\r\n            name = rs.getString(3);\r\n            email = rs.getString(6);\r\n            ph_number = rs.getString(5);\r\n        }\r\n\r\n        String query2 = \"insert into bookinghistory values(?,?,?,?,?,?,?,?)\";\r\n        PreparedStatement ps1 = dbcon.prepareStatement(query2);\r\n        ps1.setString(1,GetBookingID());\r\n        ps1.setString(2,name);\r\n        ps1.setString(3,email);\r\n        ps1.setString(4,ph_number);\r\n        ps1.setString(5,myChoice_venue);\r\n        ps1.setString(6,w1.getStartDate().toString());\r\n        ps1.setString(7,w1.getEndDate().toString());\r\n        ps1.setString(8,\"Booked\");\r\n        ps1.executeUpdate();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/tfj_gui/gui/NewBookingConferenceViewController.java b/GUI/src/main/java/tfj_gui/gui/NewBookingConferenceViewController.java
--- a/GUI/src/main/java/tfj_gui/gui/NewBookingConferenceViewController.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/tfj_gui/gui/NewBookingConferenceViewController.java	(date 1669212340118)
@@ -273,6 +273,7 @@
         else{
         SetBooking();
         if(w1.getBookingStatus().compareToIgnoreCase("Booked")==0)     {Add_to_DB();
+            UpdateEvent();
             Send_Data_Between inst = Send_Data_Between.getInstance();
             if (inst.getCheck() == 1) {
                 ManagerControllerFunctions.GoToHome(event);
@@ -357,7 +358,7 @@
     double Snacks_cost;
     double Drinks_cost;
     double Dinner_cost;
-    Conference w1 = new Conference();
+    static Conference w1 = new Conference();
     protected void SetBooking()
     {
 
@@ -431,6 +432,7 @@
             Venue_cost = w1.CalculateCost();
             System.out.print(Venue_cost);
             Final_Cost = Venue_cost + Menu_Cost;
+            w1.setFinalCost(Final_Cost);
             DisplayInformationLabel.setText("Breakfast Cost : "+(Breakfast_cost)+"\nLunch Cost : "+(Lunch_cost)
             +"\nDrinks Cost : "+(Drinks_cost)
             +"\nSnacks Cost : "+(Snacks_cost)
@@ -471,5 +473,12 @@
         ps1.setString(7,w1.getEndDate().toString());
         ps1.setString(8,"Booked");
         ps1.executeUpdate();
+    }
+    public void UpdateEvent() throws SQLException {
+        Send_Data_Between need=Send_Data_Between.getInstance();
+        Customer k=need.getCustomer();
+        Customer c=Customer.getDetailsCustomer(k.getLoginId());
+        Event.updateEvent(w1,c,Integer.parseInt(GetBookingID()),"Conference");
+
     }
 }
Index: GUI/src/main/java/tfj_gui/gui/NewBookingMarriageViewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tfj_gui.gui;\r\n\r\nimport Database.DBconnection.Connect;\r\nimport Database.TableView.*;\r\nimport Database.TableView.Menu;\r\nimport Login.Customer;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.*;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class NewBookingMarriageViewController implements Initializable\r\n{\r\n    @FXML\r\n    public Label DisplayInformationLabel;\r\n    @FXML\r\n    private Button HomeButton;\r\n    @FXML\r\n    private Button NewBookingButton;\r\n    @FXML\r\n    private Button MyAccountButton;\r\n    @FXML\r\n    private Button MyBookingsButton;\r\n    @FXML\r\n    private Button ChangePasswordButton;\r\n    @FXML\r\n    private Button AboutUsButton;\r\n    @FXML\r\n    private Button HelpButton;\r\n    @FXML\r\n    private Button LogoutButton;\r\n    @FXML\r\n    private Button ExitButton;\r\n    @FXML\r\n    private Button Next1;\r\n    @FXML\r\n    private Button GoBack;\r\n    @FXML\r\n    private Label RemarkVenue;\r\n\r\n    @FXML\r\n    protected void GoToHome(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.GoToHome(event);}\r\n        else{\r\n            ControllerFunctions.GoToHome(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void NewBookingButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n\r\n    }\r\n    @FXML\r\n    protected void MyAccountButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.MyAccountButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.MyAccountButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void MyBookingsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.MyBookingsButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.MyBookingsButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void ChangePasswordButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.ChangePasswordButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.ChangePasswordButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void AboutUsButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.AboutUsButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.AboutUsButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void HelpButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.HelpButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.HelpButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void LogoutButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.LogoutButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.LogoutButtonClicked(event);\r\n        }\r\n    }\r\n    @FXML\r\n    protected void ExitButtonClicked(ActionEvent event) throws IOException\r\n    {\r\n        Send_Data_Between inst=Send_Data_Between.getInstance();\r\n        if(inst.getCheck()==1){\r\n            ManagerControllerFunctions.ExitButtonClicked(event);}\r\n        else{\r\n            ControllerFunctions.ExitButtonClicked(event);\r\n        }\r\n    }\r\n    private final String[] Drinks_Choices = {\"Lemon juice\",\"Orange juice\",\"Mixed fruit juice\",\"Beer\",\"---None---\"};\r\n    private final String[] Venue_Choices = new Venue().getAllVenueNames().toArray(new String[0]);\r\n    private final String[] Decoration_Choices = {\"Basic\",\"Premium\",\"Royal\"};\r\n    private final String[] Lunch_Choices ={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Snacks_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Breakfast_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n    private final String[] Dinner_Choices={\"Basic\",\"Premium\",\"Royal\",\"---None---\"};\r\n\r\n    @FXML\r\n    private ChoiceBox<String> Decoration_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Breakfast_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Drinks_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Venue_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Lunch_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Snacks_choicebox;\r\n    @FXML\r\n    private ChoiceBox<String> Dinner_choicebox;\r\n    @FXML\r\n    private TextField guests;\r\n    @FXML\r\n    private Button GetCost;\r\n\r\n    //@Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        Breakfast_choicebox.getItems().addAll();\r\n        Breakfast_choicebox.setOnAction(this::Choice_in_Choice_box_breakfast);\r\n\r\n        Drinks_choicebox.getItems().addAll(Drinks_Choices);\r\n        Drinks_choicebox.setOnAction(this::Choice_in_Choice_box_drinks);\r\n\r\n        Venue_choicebox.getItems().addAll(Venue_Choices);\r\n        Venue_choicebox.setOnAction(this::Choice_in_Choice_box_venue);\r\n\r\n        Decoration_choicebox.getItems().addAll(Decoration_Choices);\r\n        Decoration_choicebox.setOnAction(this::Choice_in_Choice_box_decoration);\r\n\r\n        Breakfast_choicebox.getItems().addAll(Breakfast_Choices);\r\n        Breakfast_choicebox.setOnAction((this::Choice_in_Choice_box_breakfast));\r\n\r\n        Lunch_choicebox.getItems().addAll(Lunch_Choices);\r\n        Lunch_choicebox.setOnAction((this::Choice_in_Choice_box_lunch));\r\n\r\n        Snacks_choicebox.getItems().addAll(Snacks_Choices);\r\n        Snacks_choicebox.setOnAction((this::Choice_in_Choice_box_snacks));\r\n\r\n        Dinner_choicebox.getItems().addAll(Dinner_Choices);\r\n        Dinner_choicebox.setOnAction((this::Choice_in_Choice_box_dinner));\r\n    }\r\n    private String myChoice_decoration,myChoice_breakfast,myChoice_Drinks,myChoice_venue,myChoice_Lunch,myChoice_Snacks,myChoice_Dinner;\r\n    private String getDescription() {\r\n        String desc = \"\";\r\n        Connection con = Connect.createConnection();\r\n        try {\r\n            Statement stmt = con.createStatement();\r\n            String query = \"Select * from venue where name='\" + (myChoice_venue) + \"'\";\r\n            ResultSet rs = stmt.executeQuery(query);\r\n            if (rs.next()) {\r\n                desc = \"Capacity=\" + (rs.getInt(3)) + \"\\nPrice per day :-\" + (rs.getInt(4)) + \"\\n\" + (rs.getString(5));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            Connect.closeConnection();\r\n        }\r\n        return desc;\r\n    }\r\n    protected void Choice_in_Choice_box_decoration(ActionEvent event)\r\n    {\r\n        myChoice_decoration=Decoration_choicebox.getValue();\r\n        System.out.println(myChoice_decoration);\r\n    }\r\n    protected void Choice_in_Choice_box_drinks(ActionEvent event)\r\n    {\r\n        myChoice_Drinks=Drinks_choicebox.getValue();\r\n        System.out.println(myChoice_Drinks);\r\n    }\r\n    protected void Choice_in_Choice_box_venue(ActionEvent event)\r\n    {\r\n        myChoice_venue=Venue_choicebox.getValue();\r\n        RemarkVenue.setText(getDescription());\r\n        System.out.println(myChoice_venue);\r\n    }\r\n    protected void Choice_in_Choice_box_breakfast(ActionEvent event)\r\n    {\r\n        myChoice_breakfast=Breakfast_choicebox.getValue();\r\n        System.out.println(myChoice_breakfast);\r\n    }\r\n    protected void Choice_in_Choice_box_lunch(ActionEvent event)\r\n    {\r\n        myChoice_Lunch=Lunch_choicebox.getValue();\r\n        System.out.println(myChoice_Lunch);\r\n    }\r\n    protected void Choice_in_Choice_box_snacks(ActionEvent event)\r\n    {\r\n        myChoice_Snacks=Snacks_choicebox.getValue();\r\n        System.out.println(myChoice_Snacks);\r\n    }\r\n    protected void Choice_in_Choice_box_dinner(ActionEvent event)\r\n    {\r\n        myChoice_Dinner=Dinner_choicebox.getValue();\r\n        System.out.println(myChoice_Dinner);\r\n    }\r\n\r\n    @FXML\r\n    private DatePicker Start_Date = new DatePicker();\r\n    protected void getStartDate(ActionEvent event)\r\n    {\r\n        LocalDate SD = Start_Date.getValue();\r\n    }\r\n\r\n    @FXML\r\n    private DatePicker End_Date = new DatePicker();\r\n    protected void getEndDate(ActionEvent event)\r\n    {\r\n        LocalDate ED = End_Date.getValue();\r\n    }\r\n    private double Cost;\r\n    @FXML\r\n    protected void NextNewBooking(ActionEvent event) throws IOException, SQLException {\r\n        Venue v=new Venue(myChoice_venue,no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity=v.getCapacity();\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        if(totalCapacity<no_of_guests){\r\n            DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n        }\r\n        else{\r\n        SetBooking();\r\n        if(w1.getBookingStatus().compareToIgnoreCase(\"Booked\")==0) {\r\n            Add_to_DB();\r\n            Send_Data_Between inst = Send_Data_Between.getInstance();\r\n            if (inst.getCheck() == 1) {\r\n                ManagerControllerFunctions.GoToHome(event);\r\n            } else {\r\n                ControllerFunctions.GoToHome(event);\r\n            }\r\n        }\r\n        else DisplayInformationLabel.setText(\"Venue not available\");}\r\n    }\r\n    @FXML\r\n    protected void DisplayFinalCost(ActionEvent event)\r\n    {   Venue v=new Venue(myChoice_venue,no_of_guests);\r\n        v.setCapacity();\r\n        totalCapacity=v.getCapacity();\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        if(totalCapacity<no_of_guests)\r\n        {\r\n        DisplayInformationLabel.setText(\"Venue capacity is insufficient\");\r\n        }\r\n    else SetBooking();\r\n        //DisplayInformationLabel.setText(\"Breakfast\");\r\n    }\r\n    @FXML\r\n    protected void ReturnToHome(ActionEvent event) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"NewBooking_View.fxml\"));\r\n        Stage stage= (Stage) ((Node)event.getSource()).getScene().getWindow();\r\n        Scene scene = new Scene(fxmlLoader.load(),1080,720);\r\n        stage.setTitle(\"THE FUNCTION JUNCTION\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private String Name;\r\n    private String Email;\r\n    private String PhNumber;\r\n    private int totalCapacity;\r\n    private int no_of_guests;\r\n    public void getPass(String loginID){\r\n        String password=\"\";\r\n        try{\r\n            Connection conn= Connect.createConnection();\r\n            String query=\"Select * from customer where loginid=?\";\r\n            PreparedStatement preStatement=conn.prepareStatement(query);\r\n            preStatement.setString(1,loginID);\r\n            ResultSet rs=preStatement.executeQuery();\r\n            if(rs.next()){\r\n                Name = rs.getString(\"Name\");\r\n                Email = rs.getString(\"Email\");\r\n                PhNumber = rs.getString(\"PhoneNumber\");\r\n            }\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally{\r\n            Connect.closeConnection();\r\n        }\r\n    }\r\n    protected String GetBookingID()\r\n    {\r\n        String bookingid=\"\";\r\n        Connection c = Connect.createConnection();\r\n        try{\r\n            String query=\"Select max(BookingID) from bookinghistory\";\r\n            Statement s1 = c.createStatement();\r\n            ResultSet rs = s1.executeQuery(query);\r\n            if(rs.next())\r\n            {\r\n                bookingid = rs.getString(1);\r\n                int bs = Integer.parseInt(bookingid)+1;\r\n                bookingid = String.valueOf(bs);\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return bookingid;\r\n    }\r\n    ArrayList<Menu> menu;\r\n    double Venue_cost;\r\n    double Breakfast_cost;\r\n    double Lunch_cost;\r\n    double Snacks_cost;\r\n    double Drinks_cost;\r\n    double Dinner_cost;\r\n    Wedding w1 = new Wedding();\r\n    protected void SetBooking()\r\n    {\r\n\r\n        LocalDate startdate = Start_Date.getValue();\r\n        LocalDate enddate = End_Date.getValue();\r\n        Date sd = Date.valueOf(startdate);\r\n        Date ed = Date.valueOf(enddate);\r\n        String venue = Venue_choicebox.getValue();\r\n        Venue v1 = new Venue(venue,Integer.parseInt(guests.getText()));\r\n        no_of_guests= Integer.parseInt(guests.getText());\r\n        v1.setCapacity();\r\n        totalCapacity=v1.getCapacity();\r\n        String booking_status = v1.getBookingStatus(sd,ed);\r\n\r\n        BreakFast b1 = new BreakFast();\r\n        b1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            b1.setBf_class(myChoice_breakfast);\r\n            Breakfast_cost = b1.calculateCost();}\r\n        else{\r\n            Breakfast_cost=0;\r\n        }\r\n        Lunch l1 = new Lunch();\r\n        l1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            l1.setLunch_class(myChoice_Lunch);\r\n            Lunch_cost = l1.calculateCost();}\r\n        else{\r\n            Lunch_cost=0;\r\n        }\r\n\r\n        Snacks s1 = new Snacks();\r\n        s1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            s1.setSnack_class(myChoice_Snacks);\r\n            Snacks_cost = s1.calculateCost();}\r\n        else{\r\n            Snacks_cost=0;\r\n        }\r\n\r\n        Dinner d1 = new Dinner();\r\n        d1.setNumberOfGuests(no_of_guests);\r\n        if(myChoice_breakfast.compareToIgnoreCase(\"---None---\")!=0){\r\n            d1.setDinner_class(myChoice_Dinner);\r\n            Dinner_cost = d1.calculateCost();}\r\n        else{\r\n            Dinner_cost=0;\r\n        }\r\n\r\n        Drinks dr1 = new Drinks();\r\n        int drinks_index=0;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[0]))     drinks_index=1;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[1]))     drinks_index=2;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[2]))     drinks_index=3;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[3]))     drinks_index=4;\r\n        if(Objects.equals(myChoice_Drinks, Drinks_Choices[4]))     drinks_index=0;\r\n        dr1.setMyChoice(drinks_index);\r\n        dr1.setNumberOfGuests(no_of_guests);\r\n        Drinks_cost = dr1.calculateCost();\r\n        double Menu_Cost = Breakfast_cost + Lunch_cost + Snacks_cost + Drinks_cost + Dinner_cost;\r\n        System.out.print(Menu_Cost);\r\n        double Final_Cost;\r\n        if(booking_status.compareToIgnoreCase(\"Available\") == 0)\r\n        {\r\n            int next_booking_id = Integer.parseInt(GetBookingID());\r\n            w1.setBookingStatus(\"Booked\");\r\n            w1.setChoice(myChoice_decoration);\r\n            w1.setStartDate(sd);\r\n            w1.setEndDate(ed);\r\n            w1.setVenue(v1);\r\n            Venue_cost = w1.CalculateCost();\r\n            System.out.print(Venue_cost);\r\n            Final_Cost = Venue_cost + Menu_Cost;\r\n            DisplayInformationLabel.setText(\"Breakfast Cost : \"+(Breakfast_cost)+\"\\nLunch Cost : \"+(Lunch_cost)\r\n                    +\"\\nDrinks Cost : \"+(Drinks_cost)\r\n                    +\"\\nSnacks Cost : \"+(Snacks_cost)\r\n                    +\"\\nDinner Cost : \"+(Dinner_cost)\r\n                    +\"\\nVenue Cost : \" +(Venue_cost)\r\n                    +\"\\nFinal_Cost = \"+(Final_Cost));\r\n        }\r\n//        else\r\n//        {\r\n//            DisplayInformationLabel.setText(\"Hall not available.\");\r\n//        }\r\n    }\r\n\r\n    protected void Add_to_DB() throws SQLException {\r\n        Send_Data_Between instance = Send_Data_Between.getInstance();\r\n        Customer c1 = instance.getCustomer();\r\n        String LoginID = c1.getLoginId();\r\n        Connection dbcon = Connect.createConnection();\r\n        String Query1 = \"select * from customer where LoginID = ?\";\r\n        PreparedStatement ps = dbcon.prepareStatement(Query1);\r\n        ps.setString(1,LoginID);\r\n        ResultSet rs = ps.executeQuery();\r\n        String name=\"\",email=\"\",ph_number=\"\";\r\n        if(rs.next())\r\n        {\r\n            name = rs.getString(3);\r\n            email = rs.getString(6);\r\n            ph_number = rs.getString(5);\r\n        }\r\n\r\n        String query2 = \"insert into bookinghistory values(?,?,?,?,?,?,?,?)\";\r\n        PreparedStatement ps1 = dbcon.prepareStatement(query2);\r\n        ps1.setString(1,GetBookingID());\r\n        ps1.setString(2,name);\r\n        ps1.setString(3,email);\r\n        ps1.setString(4,ph_number);\r\n        ps1.setString(5,myChoice_venue);\r\n        ps1.setString(6,w1.getStartDate().toString());\r\n        ps1.setString(7,w1.getEndDate().toString());\r\n        ps1.setString(8,\"Booked\");\r\n        ps1.executeUpdate();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/tfj_gui/gui/NewBookingMarriageViewController.java b/GUI/src/main/java/tfj_gui/gui/NewBookingMarriageViewController.java
--- a/GUI/src/main/java/tfj_gui/gui/NewBookingMarriageViewController.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/tfj_gui/gui/NewBookingMarriageViewController.java	(date 1669212340161)
@@ -270,6 +270,7 @@
         SetBooking();
         if(w1.getBookingStatus().compareToIgnoreCase("Booked")==0) {
             Add_to_DB();
+            UpdateEvent();
             Send_Data_Between inst = Send_Data_Between.getInstance();
             if (inst.getCheck() == 1) {
                 ManagerControllerFunctions.GoToHome(event);
@@ -470,5 +471,12 @@
         ps1.setString(7,w1.getEndDate().toString());
         ps1.setString(8,"Booked");
         ps1.executeUpdate();
+    }
+    public void UpdateEvent() throws SQLException {
+        Send_Data_Between need=Send_Data_Between.getInstance();
+        Customer k=need.getCustomer();
+        Customer c=Customer.getDetailsCustomer(k.getLoginId());
+        Event.updateEvent(w1,c,Integer.parseInt(GetBookingID()),"Marriage");
+
     }
 }
Index: GUI/src/main/java/Database/TableView/ManagerDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Database.TableView;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.sql.*;\r\n\r\nimport static Database.DBconnection.Connect.closeConnection;\r\nimport static Database.DBconnection.Connect.createConnection;\r\n\r\n\r\npublic class ManagerDatabase {\r\n    private final TableView<BookingHistory>table=new TableView<BookingHistory>();\r\n    private ObservableList<BookingHistory> data = FXCollections.observableArrayList();\r\n    private ObservableList<BookingHistory> Cdata = FXCollections.observableArrayList();\r\n    public ObservableList<BookingHistory> GetDetails() throws SQLException {\r\n\r\n        try {\r\n            Connection con1 = createConnection();\r\n            String query = \"Select * from bookingHistory\";\r\n            Statement st = con1.createStatement();\r\n            ResultSet rs = st.executeQuery(query);\r\n//            String d1=rs.getDate(6).toString();\r\n//            String d2=rs.getDate(7).toString();\r\n            while (rs.next()) {\r\n                data.add(new BookingHistory(rs.getInt(1),rs.getString(2), rs.getString(3), rs.getString(4),rs.getString(5), rs.getDate(6).toString(), rs.getDate(7).toString(),rs.getString(8)));\r\n            }\r\n        }\r\n        catch (SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally {\r\n            closeConnection();\r\n        }\r\n        return data;\r\n    }\r\n    public ObservableList<BookingHistory> GetCustomerDetails(String loginID) throws SQLException {\r\n\r\n        try {\r\n            Connection con1 = createConnection();\r\n            String query1=\"select * from customer where loginid=?\";\r\n            String email=\"\";\r\n            PreparedStatement preStatement1=con1.prepareStatement(query1);\r\n            preStatement1.setString(1,loginID);\r\n            ResultSet rs1=preStatement1.executeQuery();\r\n            if(rs1.next()){\r\n                email=rs1.getString(\"emailid\");\r\n            }\r\n            String query=\"select * from bookinghistory where email=?\";\r\n            PreparedStatement preStatement=con1.prepareStatement(query);\r\n            preStatement.setString(1,email);\r\n            ResultSet rs=preStatement.executeQuery();\r\n            while (rs.next()) {\r\n                Cdata.add(new BookingHistory(rs.getString(2), rs.getString(3), rs.getString(4),rs.getString(5), rs.getDate(6).toString(), rs.getDate(7).toString()));\r\n            }\r\n        }\r\n        catch (SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally {\r\n            closeConnection();\r\n        }\r\n        return Cdata;\r\n    }\r\n//    @Override\r\n//    public void start(Stage stage) throws Exception {\r\n//        Scene scene = new Scene(new Group());\r\n//        stage.setTitle(\"Table View Sample\");\r\n//        stage.setWidth(800);\r\n//        stage.setHeight(500);\r\n//\r\n//        ObservableList<BookingHistory> data = GetDetails();\r\n//\r\n//        final Label label = new Label(\"Address Book\");\r\n//        label.setFont(new Font(\"Arial\", 20));\r\n//\r\n//        table.setEditable(true);\r\n//\r\n//        TableColumn<BookingHistory,Integer> BID = new TableColumn<>(\"Booking ID\");\r\n//        BID.setMinWidth(100);\r\n//        BID.setCellValueFactory(\r\n//                new PropertyValueFactory<BookingHistory, Integer>(\"Booking_Id\"));\r\n//\r\n//        TableColumn<BookingHistory,String> firstNameCol = new TableColumn<>(\"First Name\");\r\n//        firstNameCol.setMinWidth(100);\r\n//        firstNameCol.setCellValueFactory(\r\n//                new PropertyValueFactory<BookingHistory, String>(\"Name\"));\r\n//\r\n//\r\n//        TableColumn<BookingHistory,String> emailCol = new TableColumn<>(\"Email\");\r\n//        emailCol.setMinWidth(100);\r\n//        emailCol.setCellValueFactory(\r\n//                new PropertyValueFactory<BookingHistory, String>(\"email\"));\r\n//\r\n//        TableColumn<BookingHistory,String> phonecol = new TableColumn<>(\"Phone Number\");\r\n//        phonecol.setMinWidth(100);\r\n//        phonecol.setCellValueFactory(\r\n//                new PropertyValueFactory<BookingHistory, String>(\"PhoneNumber\"));\r\n//\r\n//        TableColumn<BookingHistory,String> hallname = new TableColumn<>(\"Hall Name\");\r\n//        hallname.setMinWidth(100);\r\n//        hallname.setCellValueFactory(\r\n//                new PropertyValueFactory<BookingHistory, String>(\"email\"));\r\n//\r\n//        TableColumn<BookingHistory,Date> Sdate = new TableColumn<>(\"Start Date\");\r\n//        Sdate.setMinWidth(100);\r\n//        Sdate.setCellValueFactory(\r\n//                new PropertyValueFactory<BookingHistory, Date>(\"StartDate\"));\r\n//\r\n//        TableColumn<BookingHistory,Date> Edate = new TableColumn<>(\"End Date\");\r\n//        Edate.setMinWidth(100);\r\n//        Edate.setCellValueFactory(\r\n//                new PropertyValueFactory<BookingHistory, Date>(\"EndDate\"));\r\n//\r\n//        TableColumn<BookingHistory,String> Status = new TableColumn<>(\"Status\");\r\n//        Status.setMinWidth(100);\r\n//        Status.setCellValueFactory(\r\n//                new PropertyValueFactory<BookingHistory, String>(\"Status\"));\r\n//\r\n//        table.setItems(data);\r\n//        table.getColumns().addAll(firstNameCol, emailCol,hallname, Sdate,Edate,Status);\r\n//\r\n//        final VBox vbox = new VBox();\r\n//        vbox.setSpacing(5);\r\n//        vbox.setPadding(new Insets(10, 0, 0, 10));\r\n//        vbox.getChildren().addAll(label, table);\r\n//\r\n//        ((Group) scene.getRoot()).getChildren().addAll(vbox);\r\n//\r\n//        stage.setScene(scene);\r\n//        stage.show();\r\n//    }\r\n//\r\n//    public static void main(String[] args) {\r\n//        launch();\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/Database/TableView/ManagerDatabase.java b/GUI/src/main/java/Database/TableView/ManagerDatabase.java
--- a/GUI/src/main/java/Database/TableView/ManagerDatabase.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/Database/TableView/ManagerDatabase.java	(date 1669207882613)
@@ -62,7 +62,7 @@
             preStatement.setString(1,email);
             ResultSet rs=preStatement.executeQuery();
             while (rs.next()) {
-                Cdata.add(new BookingHistory(rs.getString(2), rs.getString(3), rs.getString(4),rs.getString(5), rs.getDate(6).toString(), rs.getDate(7).toString()));
+                Cdata.add(new BookingHistory(rs.getInt(1),rs.getString(2), rs.getString(3), rs.getString(4),rs.getString(5), rs.getDate(6).toString(), rs.getDate(7).toString(),rs.getString(8)));
             }
         }
         catch (SQLException e){
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"6aa49edf-9c62-4bd6-b468-5e490971a42a\" name=\"Changes\" comment=\"Customer update and manager update changed(csv).\">\r\n      <change afterPath=\"$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/photo3.jpg\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/photo4.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/csv-editor.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/csv-editor.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/AboutUs_View.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/AboutUs_View.fxml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/Help_View.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/Help_View.fxml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/ManagerAboutUs_View.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/ManagerAboutUs_View.fxml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2H1v1BDLruJNMk6wSIwYIz3Oe21\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;true&quot;,\r\n    &quot;Project.color&quot;: &quot;302f2a&quot;,\r\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;19&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/IIIT/IIIT Shri City/sem3code/lab05&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.3770115&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.packagesearch.PackageSearchGeneralConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\IIIT\\IIIT Shri City\\JavaProject\\TFJ\\TheFunctionJunction\\GUI\\src\\main\\resources\\tfj_gui\\gui\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"6aa49edf-9c62-4bd6-b468-5e490971a42a\" name=\"Changes\" comment=\"\" />\r\n      <created>1667465189804</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1667465189804</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Added images at appropriate folders\">\r\n      <created>1667497013867</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667497013867</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Added Home GUI\">\r\n      <created>1667500365292</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667500365292</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Adding more GUI\">\r\n      <created>1667501690344</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667501690344</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Adding more GUI again.Made internal menu and navigation bar on the left side.\">\r\n      <created>1667559036750</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667559036750</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding more GUI again.Made internal menu and navigation bar on the left side.\">\r\n      <created>1667559061244</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667559061244</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Improved navigation panel\">\r\n      <created>1667559931095</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667559931095</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Made Person\">\r\n      <created>1667563143746</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667563143746</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Made Person,Customer,Manager.\">\r\n      <created>1667566442660</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667566442660</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"-\">\r\n      <created>1667571935682</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667571935682</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Adding mysql-connector-java-8.0.30.jar file.\">\r\n      <created>1667656396458</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667656396458</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Added table in MyBookings_View.fxml . &#10;Added output labels in InfoOfAccount_View.fxml.\">\r\n      <created>1667662808181</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667662808181</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\" -\">\r\n      <created>1667815631507</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667815631507</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\" -\">\r\n      <created>1667818435853</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667818435853</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\" -\">\r\n      <created>1667891405978</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667891405978</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\" -\">\r\n      <created>1667894889034</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667894889034</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\" -\">\r\n      <created>1667908728610</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667908728610</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Signup added.\">\r\n      <created>1668007457532</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668007457532</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Signup added.\">\r\n      <created>1668007925812</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668007925812</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Signup WORKING.&#10;Don't use date datatype otherwise signup will not work.&#10;Use String datatype in java and text datatype in mysql.\">\r\n      <created>1668012618589</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668012618589</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Added alerts for login page&#10;1) login id cant be empty&#10;2) password cant be empty&#10;3) login id and password do not match&#10;&#10;Changed a bit in login controller to ensure that 1080*720 is consistent.\">\r\n      <created>1668072680814</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668072680814</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Added some manager Scenes and their controllers.\">\r\n      <created>1668073572645</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668073572645</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Exit function implemented.\">\r\n      <created>1668074200175</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668074200175</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"booking history partial\">\r\n      <created>1668075035936</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668075035936</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"booking history partial\">\r\n      <created>1668075195488</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668075195488</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Menu&#10;BreakFas&#10;Lunch&#10;Snacks&#10;Dinner\">\r\n      <created>1668078741132</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668078741132</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Menu is made an abstract class.&#10;calculate_cost added as an abstract menthod.\">\r\n      <created>1668079111223</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668079111223</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Manager Booking Added.\">\r\n      <created>1668080085127</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668080085127</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"New Booking\">\r\n      <created>1668428902149</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668428902149</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"New Booking\">\r\n      <created>1668433716643</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668433716643</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"New booking birthday&#10;New booking marriage&#10;New booking new years party&#10;New booking conference&#10;New booking custom\">\r\n      <created>1668435126591</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668435126591</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"-\">\r\n      <created>1668436375486</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668436375486</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"Fixed case problem with Search.\">\r\n      <created>1668874352382</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668874352382</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"AboutUs_View.fxml edited and info added.\">\r\n      <created>1668922015715</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668922015715</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"-\">\r\n      <created>1668922138400</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668922138400</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"-\">\r\n      <created>1668923157758</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668923157758</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"-\">\r\n      <created>1668923531691</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668923531691</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"-\">\r\n      <created>1668925182040</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668925182040</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"-\">\r\n      <created>1668942691907</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668942691907</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"some csv files added\">\r\n      <created>1668947262703</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668947262703</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"some csv files added\">\r\n      <created>1668947735276</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668947735276</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00042\" summary=\"-\">\r\n      <created>1668954547076</created>\r\n      <option name=\"number\" value=\"00042\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668954547076</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00043\" summary=\"added changeCustomerCSV.java and changeBookingHistoryCSV.java .\">\r\n      <created>1669033881299</created>\r\n      <option name=\"number\" value=\"00043\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669033881299</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00044\" summary=\"-\">\r\n      <created>1669039147370</created>\r\n      <option name=\"number\" value=\"00044\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669039147370</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00045\" summary=\"Delete customer account by login id after confirming password functionality added.\">\r\n      <created>1669102941582</created>\r\n      <option name=\"number\" value=\"00045\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669102941582</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00046\" summary=\"Delete customer account in csv added.\">\r\n      <created>1669128567477</created>\r\n      <option name=\"number\" value=\"00046\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669128567477</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00047\" summary=\"Parth commit:&#10;Managar update data type changed.&#10;Manager loader data type changed.\">\r\n      <created>1669183443320</created>\r\n      <option name=\"number\" value=\"00047\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669183443320</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00048\" summary=\"Changes done\">\r\n      <created>1669185161906</created>\r\n      <option name=\"number\" value=\"00048\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00048\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669185161906</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00049\" summary=\"Customer update and manager update changed(csv).\">\r\n      <created>1669202151480</created>\r\n      <option name=\"number\" value=\"00049\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00049\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669202151480</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00050\" summary=\"Customer update and manager update changed(csv).\">\r\n      <created>1669202401630</created>\r\n      <option name=\"number\" value=\"00050\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00050\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669202401630</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"51\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Adding mysql-connector-java-8.0.30.jar file.\" />\r\n    <MESSAGE value=\"Added table in MyBookings_View.fxml . &#10;Added output labels in InfoOfAccount_View.fxml.\" />\r\n    <MESSAGE value=\" -\" />\r\n    <MESSAGE value=\"Signup added.\" />\r\n    <MESSAGE value=\"Signup WORKING.&#10;Don't use date datatype otherwise signup will not work.&#10;Use String datatype in java and text datatype in mysql.\" />\r\n    <MESSAGE value=\"Added alerts for login page&#10;1) login id cant be empty&#10;2) password cant be empty&#10;3) login id and password do not match&#10;&#10;Changed a bit in login controller to ensure that 1080*720 is consistent.\" />\r\n    <MESSAGE value=\"Added some manager Scenes\" />\r\n    <MESSAGE value=\"Added some manager Scenes and their controllers.\" />\r\n    <MESSAGE value=\"Exit function implemented.\" />\r\n    <MESSAGE value=\"booking history partial\" />\r\n    <MESSAGE value=\"Menu&#10;BreakFas&#10;Lunch&#10;Snacks&#10;Dinner\" />\r\n    <MESSAGE value=\"Menu is made an abstract class.&#10;calculate_cost added as an abstract menthod.\" />\r\n    <MESSAGE value=\"Manager Booking Added.\" />\r\n    <MESSAGE value=\"New Booking\" />\r\n    <MESSAGE value=\"New booking birthday&#10;New booking marriage&#10;New booking new years party&#10;New booking conference&#10;New booking custom\" />\r\n    <MESSAGE value=\"Fixed case problem with Search.\" />\r\n    <MESSAGE value=\"AboutUs_View.fxml edited and info added.\" />\r\n    <MESSAGE value=\"some csv files added\" />\r\n    <MESSAGE value=\"added changeCustomerCSV.java and changeBookingHistoryCSV.java .\" />\r\n    <MESSAGE value=\"-\" />\r\n    <MESSAGE value=\"Delete customer account by login id after confirming password functionality added.\" />\r\n    <MESSAGE value=\"Delete customer account in csv added.\" />\r\n    <MESSAGE value=\"Parth commit:&#10;Managar update data type changed.&#10;Manager loader data type changed.\" />\r\n    <MESSAGE value=\"Changes done\" />\r\n    <MESSAGE value=\"Customer update and manager update changed(csv).\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Customer update and manager update changed(csv).\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.sql.SQLException\" package=\"java.sql\" />\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/.idea/workspace.xml	(date 1669212340207)
@@ -4,14 +4,24 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="6aa49edf-9c62-4bd6-b468-5e490971a42a" name="Changes" comment="Customer update and manager update changed(csv).">
-      <change afterPath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/photo3.jpg" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/photo4.jpg" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/csv-editor.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/csv-editor.xml" afterDir="false" />
+    <list default="true" id="6aa49edf-9c62-4bd6-b468-5e490971a42a" name="Changes" comment="Custom completed">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/AboutUs_View.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/AboutUs_View.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/Help_View.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/Help_View.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/ManagerAboutUs_View.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/ManagerAboutUs_View.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/CSVLoaders/customer.csv" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/CSVLoaders/customer.csv" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/Database/DBconnection/Connect.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/Database/DBconnection/Connect.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/Database/TableView/BookingHistory.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/Database/TableView/BookingHistory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/Database/TableView/Event.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/Database/TableView/Event.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/Database/TableView/ManagerDatabase.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/Database/TableView/ManagerDatabase.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/Login/Customer.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/Login/Customer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/InfoOfAccountViewController.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/InfoOfAccountViewController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/MyBookingsViewController.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/MyBookingsViewController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingBirthdayController.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingBirthdayController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingConferenceViewController.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingConferenceViewController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingCustomViewController.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingCustomViewController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingMarriageViewController.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingMarriageViewController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingNewYearViewController.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/NewBookingNewYearViewController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/Signup_View_Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/java/tfj_gui/gui/Signup_View_Controller.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/InfoOfAccount_View.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/InfoOfAccount_View.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/MyBookings_View.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/src/main/resources/tfj_gui/gui/MyBookings_View.fxml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -22,8 +32,8 @@
     <option name="RECENT_TEMPLATES">
       <list>
         <option value="Interface" />
-        <option value="FxmlFile" />
         <option value="Class" />
+        <option value="FxmlFile" />
       </list>
     </option>
   </component>
@@ -44,7 +54,7 @@
   &quot;keyToString&quot;: {
     &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
     &quot;Downloaded.Files.Path.Enabled&quot;: &quot;true&quot;,
-    &quot;Project.color&quot;: &quot;302f2a&quot;,
+    &quot;Project.color&quot;: &quot;362c49&quot;,
     &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
     &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
     &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
@@ -52,7 +62,7 @@
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
     &quot;jdk.selected.JAVA_MODULE&quot;: &quot;19&quot;,
-    &quot;last_opened_file_path&quot;: &quot;D:/IIIT/IIIT Shri City/sem3code/lab05&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/CP,DSA Lab Codes/UG2_OOP/The_Function_Junction(1)/TheFunctionJunction&quot;,
     &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,
     &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
     &quot;project.structure.side.proportion&quot;: &quot;0.3770115&quot;,
@@ -72,6 +82,13 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1667465189804</updated>
+    </task>
+    <task id="LOCAL-00001" summary="Made Login GUI also known as front page">
+      <created>1667485392261</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1667485392261</updated>
     </task>
     <task id="LOCAL-00002" summary="Added images at appropriate folders">
       <created>1667497013867</created>
@@ -395,28 +412,21 @@
       <option name="project" value="LOCAL" />
       <updated>1669183443320</updated>
     </task>
-    <task id="LOCAL-00048" summary="Changes done">
-      <created>1669185161906</created>
+    <task id="LOCAL-00048" summary="Back button added in custom controller">
+      <created>1669192130297</created>
       <option name="number" value="00048" />
       <option name="presentableId" value="LOCAL-00048" />
       <option name="project" value="LOCAL" />
-      <updated>1669185161906</updated>
+      <updated>1669192130297</updated>
     </task>
-    <task id="LOCAL-00049" summary="Customer update and manager update changed(csv).">
-      <created>1669202151480</created>
+    <task id="LOCAL-00049" summary="Custom completed">
+      <created>1669194041901</created>
       <option name="number" value="00049" />
       <option name="presentableId" value="LOCAL-00049" />
       <option name="project" value="LOCAL" />
-      <updated>1669202151480</updated>
+      <updated>1669194041901</updated>
     </task>
-    <task id="LOCAL-00050" summary="Customer update and manager update changed(csv).">
-      <created>1669202401630</created>
-      <option name="number" value="00050" />
-      <option name="presentableId" value="LOCAL-00050" />
-      <option name="project" value="LOCAL" />
-      <updated>1669202401630</updated>
-    </task>
-    <option name="localTasksCounter" value="51" />
+    <option name="localTasksCounter" value="50" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -454,9 +464,9 @@
     <MESSAGE value="Delete customer account by login id after confirming password functionality added." />
     <MESSAGE value="Delete customer account in csv added." />
     <MESSAGE value="Parth commit:&#10;Managar update data type changed.&#10;Manager loader data type changed." />
-    <MESSAGE value="Changes done" />
-    <MESSAGE value="Customer update and manager update changed(csv)." />
-    <option name="LAST_COMMIT_MESSAGE" value="Customer update and manager update changed(csv)." />
+    <MESSAGE value="Back button added in custom controller" />
+    <MESSAGE value="Custom completed" />
+    <option name="LAST_COMMIT_MESSAGE" value="Custom completed" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: GUI/src/main/java/tfj_gui/gui/Signup_View_Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tfj_gui.gui;\r\n\r\nimport Database.DBconnection.Connect;\r\nimport Login.Customer;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.sql.*;\r\n\r\npublic class Signup_View_Controller\r\n{\r\n    Date DOB;\r\n    static int custid=1000;\r\n    @FXML\r\n    private TextField FirstNameTF;\r\n    @FXML\r\n    private TextField LastNameTF;\r\n    @FXML\r\n    private TextField EmailIdTF;\r\n    @FXML\r\n    private TextField PhoneNumberTF;\r\n    @FXML\r\n    private Button SignUpFinalButton;\r\n    @FXML\r\n    private CheckBox ConfirmDetailsCheckbox;\r\n    @FXML\r\n    private DatePicker DOBTF = new DatePicker();\r\n    @FXML\r\n    private PasswordField PasswordTF;\r\n    @FXML\r\n    private TextField LoginIdTF;\r\n    @FXML\r\n    private Button AvailableButton;\r\n    @FXML\r\n    private Button LoginButton;\r\n    @FXML\r\n    private Label AvailabilityLabel;\r\n    @FXML\r\n    protected void AvailableButtonClicked()\r\n    {\r\n        Customer c = new Customer(FirstNameTF.getText(), LastNameTF.getText(),PhoneNumberTF.getText(),EmailIdTF.getText(),LoginIdTF.getText(),PasswordTF.getText(),((TextField) DOBTF.getEditor()).getText());\r\n\r\n        if (c.Availability(LoginIdTF.getText()))\r\n        {\r\n            AvailabilityLabel.setText(\"Available!!!\");\r\n        }\r\n        else AvailabilityLabel.setText(\"Not Available!!!\");\r\n    }\r\n    @FXML\r\n    private void LoginButtonClicked(ActionEvent event) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"Login_View.fxml\"));\r\n        Stage stage= (Stage) ((Node)event.getSource()).getScene().getWindow();\r\n        Scene scene = new Scene(fxmlLoader.load(),1080,720);\r\n        stage.setTitle(\"THE FUNCTION JUNCTION\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    @FXML\r\n    protected void getDateFromPicker(ActionEvent event)\r\n    {\r\n        LocalDate dob = DOBTF.getValue();\r\n        DOB = Date.valueOf(dob);\r\n    }\r\n\r\n    @FXML\r\n    private void SignUpFinalButtonClicked() throws SQLException {\r\n        Customer c1 = new Customer(FirstNameTF.getText(), LastNameTF.getText(),PhoneNumberTF.getText(),EmailIdTF.getText(),LoginIdTF.getText(),PasswordTF.getText(), ((TextField) DOBTF.getEditor()).getText());\r\n        Connection c= Connect.createConnection();\r\n        try{\r\n            String query=\"select max(customerid) from customer\";\r\n            Statement statement=c.createStatement();\r\n            ResultSet rs=statement.executeQuery(query);\r\n            if(rs.next()){\r\n                custid=rs.getInt(1)+1;\r\n            }\r\n        }\r\n        catch(SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        finally {\r\n            c.close();\r\n        }\r\n        c1.Signup(FirstNameTF.getText(), LastNameTF.getText(),PhoneNumberTF.getText(),EmailIdTF.getText(),LoginIdTF.getText(),PasswordTF.getText(),DOB.toString(),String.valueOf(custid));\r\n        System.out.println(custid);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/tfj_gui/gui/Signup_View_Controller.java b/GUI/src/main/java/tfj_gui/gui/Signup_View_Controller.java
--- a/GUI/src/main/java/tfj_gui/gui/Signup_View_Controller.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/tfj_gui/gui/Signup_View_Controller.java	(date 1669205048583)
@@ -74,7 +74,7 @@
     @FXML
     private void SignUpFinalButtonClicked() throws SQLException {
         Customer c1 = new Customer(FirstNameTF.getText(), LastNameTF.getText(),PhoneNumberTF.getText(),EmailIdTF.getText(),LoginIdTF.getText(),PasswordTF.getText(), ((TextField) DOBTF.getEditor()).getText());
-        Connection c= Connect.createConnection();
+        Connection c = Connect.createConnection();
         try{
             String query="select max(customerid) from customer";
             Statement statement=c.createStatement();
Index: GUI/src/main/resources/tfj_gui/gui/MyBookings_View.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.image.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<BorderPane maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"720.0\" minWidth=\"1080.0\" prefHeight=\"720.0\" prefWidth=\"1080.0\" style=\"-fx-background-color: #A2A2A1FF;\" xmlns=\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"tfj_gui.gui.MyBookingsViewController\">\r\n    <left>\r\n        <VBox prefHeight=\"200.0\" prefWidth=\"180.0\" style=\"-fx-background-color: #195190FF;\" BorderPane.alignment=\"CENTER\">\r\n            <children>\r\n                <Button fx:id=\"HomeButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#GoToHome\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 2px 2px 2px 2px;\" text=\"Home\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"NewBookingButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#NewBookingButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"New Booking\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"MyAccountButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#MyAccountButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"My Account\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"MyBookingsButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#MyBookingsButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: #A2A2A1FF; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"My Bookings\" textFill=\"#195190\" />\r\n                <Button fx:id=\"ChangePasswordButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#ChangePasswordButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"Change Password\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"AboutUsButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#AboutUsButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"About Us\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"HelpButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#HelpButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"Help\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"LogoutButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#LogoutButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"Logout\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"ExitButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#ExitButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"Exit\" textFill=\"WHITE\" />\r\n            </children></VBox>\r\n    </left>\r\n    <center>\r\n        <AnchorPane maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"420.0\" prefWidth=\"600.0\" style=\"-fx-background-color: #A2A2A1FF;\" BorderPane.alignment=\"CENTER\">\r\n            <children>\r\n                <TableView fx:id=\"tableview\" layoutX=\"-151.0\" layoutY=\"-90.0\" prefHeight=\"510.0\" prefWidth=\"900.0\" style=\"-fx-background-color: #A2A2A1FF;\" AnchorPane.topAnchor=\"-50.0\">\r\n                    <columns>\r\n<!--                        <TableColumn prefWidth=\"75.0\" text=\"Booking ID\" />-->\r\n                        <TableColumn fx:id=\"NameColumn\" minWidth=\"-Infinity\" prefWidth=\"200.0\" text=\"Name\" />\r\n                        <TableColumn fx:id=\"EmailColumn\" prefWidth=\"200.0\" text=\"Email\" />\r\n                        <TableColumn fx:id=\"PhoneNumberColumn\" prefWidth=\"100.0\" text=\"Phone No.\" />\r\n                        <TableColumn fx:id=\"VenueColumn\" minWidth=\"0.0\" prefWidth=\"100.0\" text=\"venue\" />\r\n                        <TableColumn fx:id=\"StartDateColumn\" prefWidth=\"75.0\" text=\"Start Date\" />\r\n                        <TableColumn fx:id=\"EndDateColumn\" prefWidth=\"75.0\" text=\"End Date\" />\r\n<!--                        <TableColumn prefWidth=\"75.0\" text=\"Status\" />-->\r\n                    </columns>\r\n                </TableView>\r\n                <Label text=\"Booking History\" textFill=\"#195190\" underline=\"true\" AnchorPane.leftAnchor=\"250.0\" AnchorPane.topAnchor=\"-75.0\">\r\n                    <font>\r\n                        <Font name=\"System Bold Italic\" size=\"18.0\" />\r\n                    </font>\r\n                </Label>\r\n                <Pagination prefHeight=\"50.0\" prefWidth=\"270.0\" AnchorPane.bottomAnchor=\"-70.0\" AnchorPane.leftAnchor=\"200.0\" />\r\n            </children></AnchorPane>\r\n    </center>\r\n    <top>\r\n        <Pane prefHeight=\"150.0\" prefWidth=\"1080.0\" style=\"-fx-background-color: #195190FF;\" BorderPane.alignment=\"CENTER\">\r\n            <children>\r\n                <ImageView fitHeight=\"150.0\" fitWidth=\"1080.0\" pickOnBounds=\"true\">\r\n                    <image>\r\n                        <Image url=\"@tfjlogo6.png\" />\r\n                    </image>\r\n                </ImageView>\r\n            </children>\r\n        </Pane>\r\n    </top>\r\n</BorderPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/resources/tfj_gui/gui/MyBookings_View.fxml b/GUI/src/main/resources/tfj_gui/gui/MyBookings_View.fxml
--- a/GUI/src/main/resources/tfj_gui/gui/MyBookings_View.fxml	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/resources/tfj_gui/gui/MyBookings_View.fxml	(date 1669207457052)
@@ -26,12 +26,14 @@
                 <TableView fx:id="tableview" layoutX="-151.0" layoutY="-90.0" prefHeight="510.0" prefWidth="900.0" style="-fx-background-color: #A2A2A1FF;" AnchorPane.topAnchor="-50.0">
                     <columns>
 <!--                        <TableColumn prefWidth="75.0" text="Booking ID" />-->
-                        <TableColumn fx:id="NameColumn" minWidth="-Infinity" prefWidth="200.0" text="Name" />
-                        <TableColumn fx:id="EmailColumn" prefWidth="200.0" text="Email" />
-                        <TableColumn fx:id="PhoneNumberColumn" prefWidth="100.0" text="Phone No." />
-                        <TableColumn fx:id="VenueColumn" minWidth="0.0" prefWidth="100.0" text="venue" />
-                        <TableColumn fx:id="StartDateColumn" prefWidth="75.0" text="Start Date" />
-                        <TableColumn fx:id="EndDateColumn" prefWidth="75.0" text="End Date" />
+                        <TableColumn fx:id="NameColumn" minWidth="-Infinity" prefWidth="115.1999740600586" text="Name" />
+                        <TableColumn fx:id="EmailColumn" prefWidth="124.00000762939453" text="Email" />
+                        <TableColumn fx:id="PhoneNumberColumn" prefWidth="130.20001220703125" text="Phone No." />
+                        <TableColumn fx:id="VenueColumn" minWidth="0.0" prefWidth="113.5999755859375" text="venue" />
+                        <TableColumn fx:id="StartDateColumn" prefWidth="91.80007934570312" text="Start Date" />
+                        <TableColumn fx:id="EndDateColumn" prefWidth="97.7999267578125" text="End Date" />
+                  <TableColumn fx:id="BookingID" minWidth="0.0" prefWidth="102.79998779296875" text="Booking_ID" />
+                  <TableColumn fx:id="Status" prefWidth="127.199951171875" text="Booking_Status" />
 <!--                        <TableColumn prefWidth="75.0" text="Status" />-->
                     </columns>
                 </TableView>
Index: GUI/src/main/java/tfj_gui/gui/InfoOfAccountViewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tfj_gui.gui;\r\n\r\nimport Database.DBconnection.Connect;\r\nimport Login.*;\r\n\r\nimport Login.Customer;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.*;\r\nimport java.util.Date;\r\nimport java.util.ResourceBundle;\r\n\r\nimport static Database.DBconnection.Connect.con;\r\nimport static Database.DBconnection.Connect.createConnection;\r\n\r\npublic class InfoOfAccountViewController implements Initializable {\r\n    @FXML\r\n    public  Label PhoneNumber;\r\n    @FXML\r\n    public  Label Email;\r\n    @FXML\r\n    public Label MembershipStatus;\r\n    @FXML\r\n    public Label LoginId;\r\n    @FXML\r\n    public Label Age;\r\n    @FXML\r\n    private Button HomeButton;\r\n    @FXML\r\n    private Button NewBookingButton;\r\n    @FXML\r\n    private Button MyAccountButton;\r\n    @FXML\r\n    private Button MyBookingsButton;\r\n    @FXML\r\n    private Button ChangePasswordButton;\r\n    @FXML\r\n    private Button AboutUsButton;\r\n    @FXML\r\n    private Button HelpButton;\r\n    @FXML\r\n    private Button LogoutButton;\r\n    @FXML\r\n    private Button ExitButton;\r\n    @FXML\r\n    private Button DMA;\r\n\r\n    @FXML\r\n    protected void GoToHome(ActionEvent event) throws IOException {\r\n        ControllerFunctions.GoToHome(event);\r\n    }\r\n\r\n    @FXML\r\n    protected void NewBookingButtonClicked(ActionEvent event) throws IOException {\r\n        ControllerFunctions.NewBookingButtonClicked(event);\r\n    }\r\n\r\n    @FXML\r\n    protected void MyAccountButtonClicked(ActionEvent event) throws IOException, SQLException {\r\n        ControllerFunctions.MyAccountButtonClicked(event);\r\n    }\r\n\r\n    @FXML\r\n    protected void MyBookingsButtonClicked(ActionEvent event) throws IOException {\r\n        ControllerFunctions.MyBookingsButtonClicked(event);\r\n    }\r\n\r\n    @FXML\r\n    protected void ChangePasswordButtonClicked(ActionEvent event) throws IOException {\r\n        ControllerFunctions.ChangePasswordButtonClicked(event);\r\n    }\r\n\r\n    @FXML\r\n    protected void AboutUsButtonClicked(ActionEvent event) throws IOException {\r\n        ControllerFunctions.AboutUsButtonClicked(event);\r\n    }\r\n\r\n    @FXML\r\n    protected void HelpButtonClicked(ActionEvent event) throws IOException {\r\n        ControllerFunctions.HelpButtonClicked(event);\r\n    }\r\n\r\n    @FXML\r\n    protected void LogoutButtonClicked(ActionEvent event) throws IOException {\r\n        ControllerFunctions.LogoutButtonClicked(event);\r\n    }\r\n\r\n    @FXML\r\n    protected void ExitButtonClicked(ActionEvent event) throws IOException {\r\n        ControllerFunctions.ExitButtonClicked(event);\r\n    }\r\n\r\n    @FXML\r\n    private Label Name;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        Send_Data_Between need = Send_Data_Between.getInstance();\r\n            Customer c1 = need.getCustomer();\r\n            String LoginID = c1.getLoginId();\r\n        try {\r\n            Connection con = Connect.createConnection();\r\n            String query1 = \"SELECT  * FROM customer WHERE loginid=?\";\r\n            PreparedStatement preStatement = con.prepareStatement(query1);\r\n            preStatement.setString(1, LoginID);\r\n            ResultSet rs1 = preStatement.executeQuery();\r\n            if (rs1.next()) {\r\n                Name.setText(rs1.getString(3));\r\n                PhoneNumber.setText(rs1.getString(5));\r\n                Email.setText(rs1.getString(6));\r\n                MembershipStatus.setText(rs1.getString(9));\r\n                LoginId.setText(rs1.getString(1));\r\n                SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n                Date date = formatter.parse(rs1.getString(7));\r\n                Instant instant = date.toInstant();\r\n                ZonedDateTime zone = instant.atZone(ZoneId.systemDefault());\r\n                LocalDate localDate = zone.toLocalDate();\r\n                Period period = Period.between(localDate, LocalDate.now());\r\n                String age = String.valueOf(period.getYears());\r\n                Age.setText(age);\r\n            }\r\n        } catch (SQLException | ParseException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            Connect.closeConnection();\r\n            try {\r\n                con.close();\r\n            } catch (SQLException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void deleteMyAccount(ActionEvent event) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"DeleteCustomerAccount_View.fxml\"));\r\n        Stage stage= (Stage) ((Node)event.getSource()).getScene().getWindow();\r\n        Scene scene = new Scene(fxmlLoader.load(),1080,720);\r\n        stage.setTitle(\"THE FUNCTION JUNCTION\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/tfj_gui/gui/InfoOfAccountViewController.java b/GUI/src/main/java/tfj_gui/gui/InfoOfAccountViewController.java
--- a/GUI/src/main/java/tfj_gui/gui/InfoOfAccountViewController.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/tfj_gui/gui/InfoOfAccountViewController.java	(date 1669204988662)
@@ -12,6 +12,7 @@
 import javafx.scene.Scene;
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
+import javafx.scene.control.TextField;
 import javafx.stage.Stage;
 
 import java.io.IOException;
@@ -40,6 +41,8 @@
     public Label LoginId;
     @FXML
     public Label Age;
+    @FXML
+    public Label Remarkkk;
     @FXML
     private Button HomeButton;
     @FXML
@@ -60,6 +63,10 @@
     private Button ExitButton;
     @FXML
     private Button DMA;
+    @FXML
+    private Button Cancel_Booking;
+    @FXML
+    private TextField Booking_ID;
 
     @FXML
     protected void GoToHome(ActionEvent event) throws IOException {
@@ -156,4 +163,55 @@
         stage.setScene(scene);
         stage.show();
     }
+    public String getEmail(){
+        String emailID="";
+        Send_Data_Between need=Send_Data_Between.getInstance();
+        String loginID=need.getCustomer().getLoginId();
+        try{
+            Connection conn= Connect.createConnection();
+            String query="Select * from customer where loginid=?";
+            PreparedStatement preStatement=conn.prepareStatement(query);
+            preStatement.setString(1,loginID);
+            ResultSet rs=preStatement.executeQuery();
+            if(rs.next()){
+                emailID=rs.getString(6);
+            }
+        }
+        catch(SQLException e){
+            e.printStackTrace();
+        }
+        finally{
+            Connect.closeConnection();
+        }
+        return emailID;
+    }
+
+    private String Customer_BookingID;
+    protected void CEvent(int ID) throws Exception
+    {
+        try (Connection con = Connect.createConnection()) {
+            String query1="Select * from bookinghistory where bookingid=?";
+            PreparedStatement ps=con.prepareStatement(query1);
+            ps.setInt(1,ID);
+            ResultSet rs=ps.executeQuery();
+            if(rs.next()){
+            if(rs.getString(3).compareToIgnoreCase(getEmail())==0){
+            String query = "Update bookinghistory set status='Canceled' where bookingid=?";
+            PreparedStatement preStatement = con.prepareStatement(query);
+            preStatement.setInt(1, ID);
+            preStatement.executeUpdate();}
+            else{
+                Remarkkk.setText("Please enter correct booking_ID");
+            }}
+            else{
+                Remarkkk.setText("Booking ID doesn't exist");
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+    @FXML
+    public void Cancel_Event(ActionEvent event) throws Exception {
+        CEvent(Integer.parseInt(Booking_ID.getText()));
+    }
 }
Index: GUI/src/main/java/CSVLoaders/customer.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"loginid\",\"password\",\"FirstName\",\"LastName\",\"PhoneNumber\",\"EmailId\",\"DOB\",\"CustomerID\",\"MembershipStatus\",\"DateOfJoining\"\r\n456,222,Suprit,Fhundread,1234567890,sup@gmail.com,2002-08-12,1001,new,2022-11-19\r\n159,444,Khauff,TLE,1234567890,khauff@gmail.com,2001-04-15,1004,new,2022-11-19\r\n135,666,TimeLimitExceed,Terror,1234567890,tle@gmail.com,2001-04-15,1005,new,2022-11-19\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/CSVLoaders/customer.csv b/GUI/src/main/java/CSVLoaders/customer.csv
--- a/GUI/src/main/java/CSVLoaders/customer.csv	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/CSVLoaders/customer.csv	(date 1669205003322)
@@ -1,4 +1,4 @@
 "loginid","password","FirstName","LastName","PhoneNumber","EmailId","DOB","CustomerID","MembershipStatus","DateOfJoining"
 456,222,Suprit,Fhundread,1234567890,sup@gmail.com,2002-08-12,1001,new,2022-11-19
 159,444,Khauff,TLE,1234567890,khauff@gmail.com,2001-04-15,1004,new,2022-11-19
-135,666,TimeLimitExceed,Terror,1234567890,tle@gmail.com,2001-04-15,1005,new,2022-11-19
+135,444,TimeLimitExceed,Terror,1234567890,tle@gmail.com,2001-04-15,1005,new,2022-11-19
\ No newline at end of file
Index: GUI/src/main/java/Database/TableView/BookingHistory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Database.TableView;\r\n\r\nimport javafx.beans.property.SimpleIntegerProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\n\r\nimport java.sql.Date;\r\nimport java.text.SimpleDateFormat;\r\n\r\npublic class BookingHistory{\r\n    private int Bookin_Id;\r\n    private String Name;\r\n    private String Email;\r\n    private String PhoneNumber;\r\n    private String HallName;\r\n    private String StartDate;\r\n    private String EndDate;\r\n    private String Status;\r\n\r\n\r\n    public BookingHistory(int bookin_Id, String name, String email, String phoneNumber, String hallName, String startDate, String endDate, String status) {\r\n        this.Bookin_Id = bookin_Id;\r\n        this.Name = name;\r\n        this.Email = email;\r\n        this.PhoneNumber = phoneNumber;\r\n        this.HallName = hallName;\r\n        this.StartDate = startDate;\r\n        this.EndDate = endDate;\r\n        this.Status = status;\r\n    }\r\n    public BookingHistory(String name, String email, String phoneNumber, String hallName, String startDate, String endDate) {\r\n        this.Name = name;\r\n        this.Email = email;\r\n        this.PhoneNumber = phoneNumber;\r\n        this.HallName = hallName;\r\n        this.StartDate = startDate;\r\n        this.EndDate = endDate;\r\n    }\r\n\r\n    public String getBookinID() {\r\n        return String.valueOf(Bookin_Id);\r\n    }\r\n\r\n    public void setBookin_Id(int bookin_Id) {\r\n        Bookin_Id=bookin_Id;\r\n    }\r\n\r\n    public String getStatus() {\r\n        return Status;\r\n    }\r\n\r\n    public void setStatus(String status) {\r\n        Status=status;\r\n    }\r\n    public String getPhoneNumber() {\r\n        return PhoneNumber;\r\n    }\r\n\r\n    public void setPhoneNumber(String phoneNumber) {\r\n        PhoneNumber=phoneNumber;\r\n    }\r\n\r\n\r\n\r\n    public String getName() {\r\n        return Name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        Name=name;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return Email;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        Email=email;\r\n    }\r\n\r\n    public String getHallName() {\r\n        return HallName;\r\n    }\r\n\r\n    public void setHallName(String hallName) {\r\n        HallName=hallName;\r\n    }\r\n\r\n    public String getStartDate() {\r\n        return StartDate;\r\n    }\r\n\r\n    public void setStartDate(String startDate) {\r\n        StartDate=startDate;\r\n    }\r\n\r\n    public String getEndDate() {\r\n        return EndDate;\r\n    }\r\n\r\n    public void setEndDate(String endDate) {\r\n        EndDate=endDate;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/Database/TableView/BookingHistory.java b/GUI/src/main/java/Database/TableView/BookingHistory.java
--- a/GUI/src/main/java/Database/TableView/BookingHistory.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/Database/TableView/BookingHistory.java	(date 1669207457028)
@@ -15,7 +15,15 @@
     private String StartDate;
     private String EndDate;
     private String Status;
+    private double Cost;
 
+    public String getCost() {
+        return String.valueOf(Cost);
+    }
+
+    public void setCost(double cost) {
+        Cost = cost;
+    }
 
     public BookingHistory(int bookin_Id, String name, String email, String phoneNumber, String hallName, String startDate, String endDate, String status) {
         this.Bookin_Id = bookin_Id;
@@ -26,6 +34,7 @@
         this.StartDate = startDate;
         this.EndDate = endDate;
         this.Status = status;
+        this.Cost=Cost;
     }
     public BookingHistory(String name, String email, String phoneNumber, String hallName, String startDate, String endDate) {
         this.Name = name;
Index: GUI/src/main/java/Database/DBconnection/Connect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Database.DBconnection;\r\nimport java.sql.*;\r\npublic class Connect {\r\n    public static final String user=\"root\";\r\n    public static final String pass=\"#Ur524cmbh3#Q2jrqr2l\";\r\n    public static final String url=\"jdbc:mysql://localhost:3306/the_function_junction\";\r\n    public static Connection con=null;\r\n\r\n    public static Connection createConnection() {\r\n        try {\r\n            //Class.forName(\"com.mysql.jdbc.Driver\");\r\n            con= DriverManager.getConnection(url,user,pass);\r\n        }\r\n        catch (SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        return con;\r\n    }\r\n    public static void closeConnection(){\r\n        if(con!=null){\r\n            try{\r\n                con.close();\r\n            }\r\n            catch(SQLException e){\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/java/Database/DBconnection/Connect.java b/GUI/src/main/java/Database/DBconnection/Connect.java
--- a/GUI/src/main/java/Database/DBconnection/Connect.java	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/java/Database/DBconnection/Connect.java	(date 1669205003356)
@@ -2,7 +2,7 @@
 import java.sql.*;
 public class Connect {
     public static final String user="root";
-    public static final String pass="#Ur524cmbh3#Q2jrqr2l";
+    public static final String pass="Digvijay@2101";
     public static final String url="jdbc:mysql://localhost:3306/the_function_junction";
     public static Connection con=null;
 
Index: GUI/src/main/resources/tfj_gui/gui/InfoOfAccount_View.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.image.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<BorderPane maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"720.0\" prefWidth=\"1080.0\" xmlns=\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"tfj_gui.gui.InfoOfAccountViewController\">\r\n    <left>\r\n        <VBox prefHeight=\"200.0\" prefWidth=\"180.0\" style=\"-fx-background-color: #195190FF;\" BorderPane.alignment=\"CENTER\">\r\n            <children>\r\n                <Button fx:id=\"HomeButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#GoToHome\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 2px 2px 2px 2px;\" text=\"Home\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"NewBookingButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#NewBookingButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"New Booking\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"MyAccountButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#MyAccountButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: #A2A2A1FF; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"My Account\" textFill=\"#195190\" />\r\n                <Button fx:id=\"MyBookingsButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#MyBookingsButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"My Bookings\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"ChangePasswordButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#ChangePasswordButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"Change Password\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"AboutUsButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#AboutUsButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"About Us\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"HelpButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#HelpButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"Help\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"LogoutButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#LogoutButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"Logout\" textFill=\"WHITE\" />\r\n                <Button fx:id=\"ExitButton\" alignment=\"CENTER\" contentDisplay=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#ExitButtonClicked\" prefHeight=\"30.0\" prefWidth=\"180.0\" style=\"-fx-background-color: transparent; -fx-border-color: white; -fx-border-width: 0px 2px 2px 2px;\" text=\"Exit\" textFill=\"WHITE\" />\r\n            </children></VBox>\r\n    </left>\r\n    <center>\r\n        <AnchorPane prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #A2A2A1FF;\" BorderPane.alignment=\"CENTER\">\r\n         <children>\r\n            <Label layoutX=\"14.0\" layoutY=\"14.0\" text=\"My Account\" textFill=\"WHITE\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"36.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label layoutX=\"30.0\" layoutY=\"60.0\" text=\"Name:  \" textFill=\"#fcfcfc\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label fx:id=\"Name\" layoutX=\"120.0\" layoutY=\"60.0\" text=\"getName\" textFill=\"#195190\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label layoutX=\"30.0\" layoutY=\"100.0\" text=\"Phone Number:\" textFill=\"WHITE\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label fx:id=\"PhoneNumber\" layoutX=\"230.0\" layoutY=\"100.0\" text=\"getPhNo\" textFill=\"#195190\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label layoutX=\"30.0\" layoutY=\"140.0\" text=\"Email Id:\" textFill=\"WHITE\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label fx:id=\"Email\" layoutX=\"140.0\" layoutY=\"140.0\" text=\"getEmail\" textFill=\"#195190\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label layoutX=\"30.0\" layoutY=\"180.0\" text=\"Membership Status:\" textFill=\"WHITE\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label fx:id=\"MembershipStatus\" layoutX=\"275.0\" layoutY=\"180.0\" text=\"getMEMStatus\" textFill=\"#195190\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label layoutX=\"30.0\" layoutY=\"220.0\" text=\"Login Id:\" textFill=\"WHITE\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label fx:id=\"LoginId\" layoutX=\"140.0\" layoutY=\"220.0\" text=\"getLoginId\" textFill=\"#195190\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label layoutX=\"30.0\" layoutY=\"260.0\" text=\"Age:\" textFill=\"WHITE\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Label fx:id=\"Age\" layoutX=\"100.0\" layoutY=\"260.0\" text=\"getAge\" textFill=\"#195190\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Button fx:id=\"DMA\" layoutX=\"74.0\" layoutY=\"320.0\" mnemonicParsing=\"false\" onAction=\"#deleteMyAccount\" text=\"Delete My Account\">\r\n               <font>\r\n                  <Font name=\"System Bold\" size=\"14.0\" />\r\n               </font>\r\n            </Button>\r\n         </children></AnchorPane>\r\n    </center>\r\n    <top>\r\n        <Pane prefHeight=\"150.0\" prefWidth=\"1080.0\" style=\"-fx-background-color: #195190FF;\" BorderPane.alignment=\"CENTER\">\r\n            <children>\r\n                <ImageView fitHeight=\"150.0\" fitWidth=\"1080.0\" pickOnBounds=\"true\">\r\n                    <image>\r\n                        <Image url=\"@tfjlogo6.png\" />\r\n                    </image>\r\n                </ImageView>\r\n            </children>\r\n        </Pane>\r\n    </top>\r\n</BorderPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/src/main/resources/tfj_gui/gui/InfoOfAccount_View.fxml b/GUI/src/main/resources/tfj_gui/gui/InfoOfAccount_View.fxml
--- a/GUI/src/main/resources/tfj_gui/gui/InfoOfAccount_View.fxml	(revision eda4b2a6a5da58e375b1312091777f9446a73f1e)
+++ b/GUI/src/main/resources/tfj_gui/gui/InfoOfAccount_View.fxml	(date 1669204988670)
@@ -93,6 +93,18 @@
                   <Font name="System Bold" size="14.0" />
                </font>
             </Button>
+            <Label layoutX="545.0" layoutY="41.0" text="Cancel Booking" textFill="#195190">
+               <font>
+                  <Font name="System Bold" size="19.0" />
+               </font>
+            </Label>
+            <TextField fx:id="Booking_ID" layoutX="545.0" layoutY="95.0" prefHeight="26.0" prefWidth="231.0" promptText="Enter booking ID of event to be canceled" />
+            <Button fx:id="Cancel_Booking" layoutX="605.0" layoutY="167.0" mnemonicParsing="false" onAction="#Cancel_Event" text="Cancel Booking" />
+            <Label fx:id="Remarkkk" layoutX="531.0" layoutY="247.0" prefHeight="51.0" prefWidth="340.0" textFill="#d11909">
+               <font>
+                  <Font name="System Bold" size="15.0" />
+               </font>
+            </Label>
          </children></AnchorPane>
     </center>
     <top>
